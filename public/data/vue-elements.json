{
  "vue": {
    "name": "Vue.js",
    "category": "basics",
    "description": "Vue (/vju:/ à prononcer comme en anglais: view) est un framework JavaScript qui se repose sur les standards HTML, CSS et JavaScript. Il propose une manière efficace de déclarer des composants pour la construction d'interfaces utilisateur de toute complexité.",
    "syntax": "// Création d'une application Vue\nimport { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')",
    "attributes": [
      {
        "name": "Rendu déclaratif",
        "description": "Vue s'appuie sur le standard HTML avec une syntaxe de type template qui permet de décrire de manière déclarative la structure HTML tout en étant basée sur un état JavaScript."
      },
      {
        "name": "Réactivité",
        "description": "Vue traque automatiquement tout changement d'état JavaScript et met à jour efficacement le DOM en cas de changement."
      },
      {
        "name": "Composants",
        "description": "Système de composants qui permet de construire des interfaces en assemblant des composants réutilisables."
      },
      {
        "name": "Single-File Components",
        "description": "Format de fichier .vue qui encapsule la logique (JavaScript), le modèle (HTML) et les styles (CSS) du composant dans un seul fichier."
      }
    ],
    "examples": [
      {
        "title": "Application Vue simple",
        "code": "import { createApp, ref } from 'vue'\n\ncreateApp({\n  setup() {\n    return {\n      count: ref(0)\n    }\n  }\n}).mount('#app')\n\n<!-- Template HTML -->\n<div id=\"app\">\n  <button @click=\"count++\">Le compteur est à {{ count }}</button>\n</div>"
      },
      {
        "title": "Composant monofichier (SFC)",
        "code": "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Le compteur est à {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>"
      },
      {
        "title": "Utilisation des directives",
        "code": "<template>\n  <div>\n    <!-- Conditionnels -->\n    <p v-if=\"seen\">Maintenant vous me voyez</p>\n    \n    <!-- Boucles -->\n    <ul>\n      <li v-for=\"item in items\" :key=\"item.id\">{{ item.text }}</li>\n    </ul>\n    \n    <!-- Événements -->\n    <button v-on:click=\"reverseMessage\">Inverser le message</button>\n    <button @click=\"count++\">Incrémenter (syntaxe courte)</button>\n    \n    <!-- Binding de propriétés -->\n    <span v-bind:title=\"message\">Hover me</span>\n    <span :class=\"{ active: isActive }\">Classe conditionnelle</span>\n  </div>\n</template>"
      },
      {
        "title": "Gestion de l'état avec la Composition API",
        "code": "<script setup>\nimport { ref, computed, watch, onMounted } from 'vue'\n\n// État réactif\nconst count = ref(0)\nconst message = ref('Hello Vue!')\n\n// Propriétés calculées\nconst doubleCount = computed(() => count.value * 2)\n\n// Observateurs\nwatch(count, (newValue, oldValue) => {\n  console.log(`La valeur a changé de ${oldValue} à ${newValue}`)\n})\n\n// Hooks de cycle de vie\nonMounted(() => {\n  console.log('Le composant est monté!')\n})\n\n// Méthodes\nfunction increment() {\n  count.value++\n}\n</script>"
      }
    ],
    "related": ["reactivity", "components", "directives", "lifecycle"],
    "animation": {
      "steps": [
        {
          "title": "Vue.js - Le Framework Évolutif",
          "text": "Vue est un framework JavaScript qui couvre la plupart des fonctionnalités courantes nécessaires au développement front-end. Il est conçu pour être flexible et adoptable de manière incrémentale.",
          "code": "import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Vue.js peut être utilisé de différentes manières :</pre><ul style='margin-top:5px'><li>Extension du HTML statique</li><li>Intégration de Web Components</li><li>Application mono-page (SPA)</li><li>Fullstack / Rendu côté serveur (SSR)</li><li>JAMStack / Génération de sites statiques (SSG)</li><li>Applications desktop, mobile, WebGL, terminal</li></ul></div>"
          }
        },
        {
          "title": "Rendu déclaratif",
          "text": "Vue s'appuie sur le standard HTML avec une syntaxe de type template qui permet de décrire de manière déclarative la structure HTML basée sur un état JavaScript.",
          "code": "// JavaScript\nconst message = ref('Hello Vue!')\n\n<!-- HTML -->\n<div>{{ message }}</div>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>État JavaScript:</pre><pre style='margin:0; color:blue'>message = \"Hello Vue!\"</pre><pre style='margin:0'></pre><pre style='margin:0'>Rendu HTML:</pre><pre style='margin:0'>&lt;div&gt;Hello Vue!&lt;/div&gt;</pre><pre style='margin:0'></pre><pre style='margin:0'>Si l'état change:</pre><pre style='margin:0; color:blue'>message = \"Bonjour Vue!\"</pre><pre style='margin:0'></pre><pre style='margin:0'>Le DOM est automatiquement mis à jour:</pre><pre style='margin:0'>&lt;div&gt;Bonjour Vue!&lt;/div&gt;</pre></div>"
          }
        },
        {
          "title": "Réactivité",
          "text": "Vue traque automatiquement tout changement d'état JavaScript et met à jour efficacement le DOM en cas de changement.",
          "code": "import { ref } from 'vue'\n\n// Création d'une référence réactive\nconst count = ref(0)\n\n// Accès et modification\nconsole.log(count.value) // 0\ncount.value++\nconsole.log(count.value) // 1\n\n// Dans le template, pas besoin de .value\n// <button>{{ count }}</button>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>1. Création d'un état réactif</pre><pre style='margin:0; color:blue'>const count = ref(0)</pre><pre style='margin:0'></pre><pre style='margin:0'>2. Vue établit des connexions de dépendance</pre><pre style='margin:0; color:blue'>Template → count</pre><pre style='margin:0'></pre><pre style='margin:0'>3. Modification de l'état</pre><pre style='margin:0; color:blue'>count.value++</pre><pre style='margin:0'></pre><pre style='margin:0'>4. Vue déclenche automatiquement la mise à jour du DOM</pre></div>"
          }
        },
        {
          "title": "Composants Single-File (SFC)",
          "text": "Dans la plupart des projets Vue dotés d'outils de construction, nous créons des composants Vue en utilisant un format de fichier semblable à HTML appelé Composant monofichier (SFC).",
          "code": "<script setup>\nimport { ref } from 'vue'\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Le compteur est à {{ count }}</button>\n</template>\n\n<style scoped>\nbutton {\n  font-weight: bold;\n}\n</style>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Un SFC contient 3 sections:</pre><pre style='margin:0'></pre><pre style='margin:0; color:blue'>&lt;script&gt; - Logique JavaScript</pre><pre style='margin:0'>Gestion de l'état, méthodes, hooks de cycle de vie</pre><pre style='margin:0'></pre><pre style='margin:0; color:green'>&lt;template&gt; - Structure HTML</pre><pre style='margin:0'>Syntaxe de template Vue avec directives</pre><pre style='margin:0'></pre><pre style='margin:0; color:purple'>&lt;style&gt; - CSS</pre><pre style='margin:0'>Styles, optionnellement scoped au composant</pre></div>"
          }
        },
        {
          "title": "Directives Vue",
          "text": "Vue utilise une syntaxe basée sur des attributs HTML spéciaux appelés 'directives' pour appliquer un comportement réactif au DOM.",
          "code": "<!-- Affichage conditionnel -->\n<p v-if=\"seen\">Maintenant vous me voyez</p>\n\n<!-- Boucles -->\n<ul>\n  <li v-for=\"item in items\" :key=\"item.id\">{{ item.text }}</li>\n</ul>\n\n<!-- Événements -->\n<button v-on:click=\"handleClick\">Cliquez-moi</button>\n<button @click=\"count++\">Syntaxe abrégée</button>\n\n<!-- Liaison d'attributs -->\n<img v-bind:src=\"imageUrl\" :alt=\"imageAlt\">\n\n<!-- Liaison bidirectionnelle -->\n<input v-model=\"message\">",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Principales directives Vue:</pre><ul style='margin-top:5px'><li><span style='color:blue'>v-if / v-else / v-else-if</span> - Rendu conditionnel</li><li><span style='color:blue'>v-for</span> - Rendu de listes</li><li><span style='color:blue'>v-on / @</span> - Écoute d'événements</li><li><span style='color:blue'>v-bind / :</span> - Liaison d'attributs</li><li><span style='color:blue'>v-model</span> - Liaison bidirectionnelle pour les formulaires</li><li><span style='color:blue'>v-show</span> - Visibilité conditionnelle via CSS</li><li><span style='color:blue'>v-slot / #</span> - Distribution de contenu</li></ul></div>"
          }
        }
      ]
    }
  },
  "components": {
    "name": "Composants Vue",
    "category": "components",
    "description": "Les composants sont des instances de Vue réutilisables avec un nom. Ils vous permettent de construire des applications en assemblant des éléments indépendants et réutilisables.",
    "syntax": "// Définition de composant en Vue 3\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n\nfunction increment() {\n  count.value++\n}\n</script>\n\n<template>\n  <button @click=\"increment\">{{ count }}</button>\n</template>",
    "attributes": [
      {
        "name": "Props",
        "description": "Attributs personnalisés que vous pouvez définir sur un composant pour passer des données du parent à l'enfant."
      },
      {
        "name": "Émission d'événements",
        "description": "Mécanisme pour communiquer des changements ou des actions du composant enfant vers le parent."
      },
      {
        "name": "Slots",
        "description": "Système de distribution de contenu qui permet aux composants parents d'injecter du contenu dans des emplacements spécifiques des composants enfants."
      },
      {
        "name": "Cycle de vie",
        "description": "Hooks qui permettent d'exécuter du code à des moments spécifiques pendant la durée de vie d'un composant."
      }
    ],
    "examples": [
      {
        "title": "Définition de composant avec props",
        "code": "<script setup>\ndefineProps({\n  title: String,\n  likes: {\n    type: Number,\n    default: 0\n  },\n  isPublished: Boolean,\n  commentIds: Array,\n  author: Object\n})\n</script>\n\n<template>\n  <h3>{{ title }}</h3>\n  <p>Likes: {{ likes }}</p>\n</template>"
      },
      {
        "title": "Émission d'événements",
        "code": "<script setup>\nconst emit = defineEmits(['update', 'delete'])\n\nfunction onUpdate() {\n  emit('update', { id: 1, text: 'Updated content' })\n}\n\nfunction onDelete() {\n  emit('delete', 1)\n}\n</script>\n\n<template>\n  <button @click=\"onUpdate\">Mettre à jour</button>\n  <button @click=\"onDelete\">Supprimer</button>\n</template>"
      },
      {
        "title": "Utilisation des slots",
        "code": "<!-- ComponentParent.vue -->\n<template>\n  <ChildComponent>\n    <template #header>\n      <h2>Titre de l'en-tête</h2>\n    </template>\n    \n    <template #default>\n      <p>Contenu principal</p>\n    </template>\n    \n    <template #footer>\n      <p>Contenu du pied de page</p>\n    </template>\n  </ChildComponent>\n</template>\n\n<!-- ChildComponent.vue -->\n<template>\n  <header>\n    <slot name=\"header\">Titre par défaut</slot>\n  </header>\n  \n  <main>\n    <slot>Contenu par défaut</slot>\n  </main>\n  \n  <footer>\n    <slot name=\"footer\">Pied de page par défaut</slot>\n  </footer>\n</template>"
      }
    ],
    "related": ["vue", "reactivity", "lifecycle", "directives"],
    "animation": {
      "steps": [
        {
          "title": "Composants en Vue",
          "text": "Les composants sont l'élément fondamental de Vue. Ils permettent de construire des interfaces utilisateur en assemblant des blocs indépendants et réutilisables.",
          "code": "// MonComposant.vue\n<script setup>\nimport { ref } from 'vue'\n\nconst count = ref(0)\n</script>\n\n<template>\n  <button @click=\"count++\">Clics: {{ count }}</button>\n</template>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Vue application</pre><pre style='margin:0'> ├── App (composant racine)</pre><pre style='margin:0'>     ├── Header (composant enfant)</pre><pre style='margin:0'>     ├── Content (composant enfant)</pre><pre style='margin:0'>     │    ├── Sidebar</pre><pre style='margin:0'>     │    └── MainContent</pre><pre style='margin:0'>     └── Footer (composant enfant)</pre></div>"
          }
        },
        {
          "title": "Communication par Props",
          "text": "Les props sont des attributs personnalisés que vous pouvez enregistrer sur un composant. Elles permettent de passer des données du composant parent vers ses enfants.",
          "code": "<!-- Parent.vue -->\n<template>\n  <ChildComponent \n    :title=\"pageTitle\" \n    :user=\"currentUser\" \n  />\n</template>\n\n<!-- ChildComponent.vue -->\n<script setup>\ndefineProps(['title', 'user'])\n</script>\n\n<template>\n  <h2>{{ title }}</h2>\n  <p>User: {{ user.name }}</p>\n</template>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Communication Parent → Enfant</pre><pre style='margin:0'></pre><pre style='margin:0'>Parent:</pre><pre style='margin:0; color:blue'>pageTitle = \"Mon titre de page\"</pre><pre style='margin:0; color:blue'>currentUser = { name: \"Alice\", role: \"Admin\" }</pre><pre style='margin:0'></pre><pre style='margin:0'>Enfant reçoit:</pre><pre style='margin:0; color:green'>title = \"Mon titre de page\"</pre><pre style='margin:0; color:green'>user = { name: \"Alice\", role: \"Admin\" }</pre></div>"
          }
        },
        {
          "title": "Émission d'événements",
          "text": "Les composants enfants peuvent émettre des événements personnalisés que les parents peuvent écouter pour réagir aux changements.",
          "code": "<!-- ChildComponent.vue -->\n<script setup>\nconst emit = defineEmits(['update', 'delete'])\n\nfunction updateItem() {\n  emit('update', { id: 1, data: 'Updated' })\n}\n</script>\n\n<template>\n  <button @click=\"updateItem\">Mettre à jour</button>\n</template>\n\n<!-- Parent.vue -->\n<template>\n  <ChildComponent \n    @update=\"handleUpdate\" \n    @delete=\"handleDelete\" \n  />\n</template>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Communication Enfant → Parent</pre><pre style='margin:0'></pre><pre style='margin:0'>1. Enfant définit les événements</pre><pre style='margin:0; color:blue'>defineEmits(['update', 'delete'])</pre><pre style='margin:0'></pre><pre style='margin:0'>2. Enfant émet un événement avec des données</pre><pre style='margin:0; color:blue'>emit('update', { id: 1, data: 'Updated' })</pre><pre style='margin:0'></pre><pre style='margin:0'>3. Parent écoute l'événement</pre><pre style='margin:0; color:green'>@update=\"handleUpdate\"</pre><pre style='margin:0'></pre><pre style='margin:0'>4. Parent reçoit les données émises</pre></div>"
          }
        },
        {
          "title": "Système de Slots",
          "text": "Les slots permettent aux composants parents d'injecter du contenu dans des emplacements spécifiques des composants enfants, offrant une grande flexibilité pour la composition d'interfaces.",
          "code": "<!-- BaseCard.vue -->\n<template>\n  <div class=\"card\">\n    <div class=\"card-header\">\n      <slot name=\"header\">Header par défaut</slot>\n    </div>\n    \n    <div class=\"card-body\">\n      <slot>Contenu par défaut</slot>\n    </div>\n    \n    <div class=\"card-footer\">\n      <slot name=\"footer\">Footer par défaut</slot>\n    </div>\n  </div>\n</template>\n\n<!-- Utilisation -->\n<BaseCard>\n  <template #header>Mon titre personnalisé</template>\n  <p>Contenu principal</p>\n  <template #footer>Mes boutons <button>OK</button></template>\n</BaseCard>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Le système de slots permet:</pre><ul style='margin-top:5px'><li>Injection de contenu flexible</li><li>Composants hautement réutilisables</li><li>Slots nommés pour plusieurs emplacements</li><li>Contenu par défaut si rien n'est fourni</li><li>Slots avec portée pour accéder aux données</li></ul></div>"
          }
        },
        {
          "title": "Cycle de vie des composants",
          "text": "Les composants Vue ont un cycle de vie qui vous permet d'exécuter du code à des moments spécifiques pendant leur existence.",
          "code": "<script setup>\nimport { onMounted, onUpdated, onUnmounted, ref } from 'vue'\n\nconst count = ref(0)\n\nonMounted(() => {\n  console.log('Le composant est monté')\n})\n\nonUpdated(() => {\n  console.log('Le composant a été mis à jour')\n})\n\nonUnmounted(() => {\n  console.log('Le composant va être détruit')\n})\n</script>",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Cycle de vie d'un composant Vue:</pre><pre style='margin:0'></pre><pre style='margin:0; color:blue'>1. Création</pre><pre style='margin:0'>   - setup() [Composition API]</pre><pre style='margin:0'></pre><pre style='margin:0; color:green'>2. Montage</pre><pre style='margin:0'>   - onBeforeMount()</pre><pre style='margin:0'>   - onMounted()</pre><pre style='margin:0'></pre><pre style='margin:0; color:orange'>3. Mises à jour</pre><pre style='margin:0'>   - onBeforeUpdate()</pre><pre style='margin:0'>   - onUpdated()</pre><pre style='margin:0'></pre><pre style='margin:0; color:red'>4. Démontage</pre><pre style='margin:0'>   - onBeforeUnmount()</pre><pre style='margin:0'>   - onUnmounted()</pre></div>"
          }
        }
      ]
    }
  }
}