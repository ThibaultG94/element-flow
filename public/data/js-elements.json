{
  "AggregateError": {
    "name": "AggregateError",
    "category": "errors",
    "description": "Un objet qui représente une erreur lorsque plusieurs erreurs doivent être agrégées en une seule.",
    "syntax": "new AggregateError(errors, message, options)",
    "attributes": [
      {
        "name": "errors",
        "description": "Un itérable d'objets d'erreur à agréger ensemble."
      },
      {
        "name": "message",
        "description": "Un message d'erreur lisible par l'homme. Par défaut: \"\"."
      },
      {
        "name": "options",
        "description": "Un objet facultatif qui peut contenir des propriétés supplémentaires, comme 'cause'."
      }
    ],
    "examples": [
      {
        "title": "Intercepter une AggregateError avec Promise.any()",
        "code": "Promise.any([Promise.reject(new Error(\"une erreur\"))])\n  .catch((e) => {\n    console.log(e instanceof AggregateError); // true\n    console.log(e.message); // \"All Promises rejected\"\n    console.log(e.name); // \"AggregateError\"\n    console.log(e.errors); // [ Error: \"une erreur\" ]\n  });"
      },
      {
        "title": "Créer et lever un AggregateError",
        "code": "try {\n  throw new AggregateError([new Error(\"une erreur\")], \"Plusieurs erreurs détectées\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Plusieurs erreurs détectées\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"une erreur\" ]\n}"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Qu'est-ce que AggregateError?",
          "text": "AggregateError est un type d'erreur spécial introduit en JavaScript qui permet de regrouper plusieurs erreurs en une seule.",
          "code": "// AggregateError hérite de Error\nconst err = new AggregateError([], 'Erreurs multiples');",
          "visualDemo": {
            "content": "<div class='html-element'><code>AggregateError</code> → hérite de → <code>Error</code></div>"
          }
        },
        {
          "title": "Création d'un AggregateError",
          "text": "Tu peux créer un AggregateError en lui passant un tableau d'erreurs et un message descriptif facultatif.",
          "code": "const erreurs = [\n  new Error('Erreur de validation'),\n  new TypeError('Type incorrect')\n];\n\nconst aggregateErr = new AggregateError(erreurs, 'Multiple erreurs détectées');\nconsole.log(aggregateErr.message); // 'Multiple erreurs détectées'\nconsole.log(aggregateErr.errors.length); // 2",
          "visualDemo": {
            "content": "<div class='html-element'><strong>AggregateError</strong><div class='body-element'><strong>errors:</strong> [ Error, TypeError ]<br><strong>message:</strong> \"Multiple erreurs détectées\"<br><strong>name:</strong> \"AggregateError\"</div></div>"
          }
        },
        {
          "title": "Utilisation avec Promise.any()",
          "text": "AggregateError est principalement utilisé par Promise.any() lorsque toutes les promesses sont rejetées, groupant ainsi tous les motifs de rejet.",
          "code": "Promise.any([\n  Promise.reject(new Error('API erreur')),\n  Promise.reject(new Error('Timeout erreur'))\n])\n.catch(erreurs => {\n  console.log(erreurs instanceof AggregateError); // true\n  console.log(erreurs.errors); // [Error: 'API erreur', Error: 'Timeout erreur']\n});",
          "visualDemo": {
            "content": "<div class='html-element'><strong>Promise.any()</strong><div class='head-element'>Rejette avec AggregateError quand toutes les promesses échouent</div><div class='body-element'><ul style='list-style-type: none; padding-left: 0;'><li>✗ Promise 1 (rejetée)</li><li>✗ Promise 2 (rejetée)</li></ul>→ AggregateError contenant les deux raisons de rejet</div></div>"
          }
        },
        {
          "title": "Accès aux erreurs individuelles",
          "text": "Tu peux accéder aux erreurs individuelles via la propriété 'errors' qui contient un tableau de toutes les erreurs agrégées.",
          "code": "try {\n  throw new AggregateError([\n    new Error('Erreur 1'),\n    new Error('Erreur 2'),\n    new Error('Erreur 3')\n  ], 'Trois erreurs sont survenues');\n} catch (e) {\n  // Accès aux erreurs individuelles\n  e.errors.forEach((err, index) => {\n    console.log(`Erreur ${index + 1}: ${err.message}`);\n  });\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #f9f9f9; padding: 1rem; border-radius: 8px; border: 1px solid #ddd;'><span style='color: green;'>// Console output:</span><br>Erreur 1: Erreur 1<br>Erreur 2: Erreur 2<br>Erreur 3: Erreur 3</div>"
          }
        },
        {
          "title": "Compatibilité et support",
          "text": "AggregateError est relativement récent en JavaScript, introduit avec ES2021. Pour les navigateurs plus anciens, un polyfill peut être nécessaire.",
          "code": "// Polyfill simple pour AggregateError\nif (typeof AggregateError === 'undefined') {\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(errors, message) {\n      super(message || '');\n      this.name = 'AggregateError';\n      this.errors = errors;\n    }\n  };\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; padding: 1rem; background: #f5f5f5; border-radius: 8px;'><span style='color: #888;'>// Support du navigateur pour AggregateError:</span><br><br>✅ Chrome 85+<br>✅ Firefox 79+<br>✅ Safari 14+<br>✅ Edge 85+<br>❌ Internet Explorer</div>"
          }
        }
      ]
    },
    "related": ["Error", "TypeError", "Promise"]
  },
  "array": {
    "name": "Array",
    "category": "objects",
    "description": "L'objet global Array est utilisé pour créer des tableaux. Les tableaux sont des objets de haut-niveau semblables à des listes dont la longueur et le type des éléments ne sont pas fixés.",
    "syntax": "// Notations littérales\nlet arr1 = [];\nlet arr2 = [element1, element2, ...];\n\n// Constructeur\nlet arr3 = new Array();\nlet arr4 = new Array(element1, element2, ...);\nlet arr5 = new Array(arrayLength);",
    "attributes": [
      {
        "name": "length",
        "description": "Propriété qui indique le nombre d'éléments dans le tableau. Cette propriété est liée aux propriétés numériques du tableau et peut être modifiée directement."
      },
      {
        "name": "prototype",
        "description": "Permet d'ajouter des propriétés et méthodes à tous les objets Array."
      },
      {
        "name": "[@@species]",
        "description": "Fonction de construction utilisée pour créer les objets dérivés."
      },
      {
        "name": "[@@unscopables]",
        "description": "Symbole contenant les noms des propriétés à exclure d'une portée de liaison avec with."
      }
    ],
    "examples": [
      {
        "title": "Créer un tableau",
        "code": "// Tableau littéral\nlet fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.length); // 2\n\n// Avec le constructeur\nlet numbers = new Array(1, 2, 3, 4, 5);\nconsole.log(numbers.length); // 5\n\n// Tableau vide avec longueur spécifiée\nlet emptyArray = new Array(5);\nconsole.log(emptyArray.length); // 5"
      },
      {
        "title": "Accéder aux éléments",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\n// Accès par index (commence à 0)\nlet first = fruits[0]; // \"Apple\"\nlet second = fruits[1]; // \"Banana\"\n\n// Dernier élément\nlet last = fruits[fruits.length - 1]; // \"Orange\"\n\n// Index hors limites\nlet nonExistent = fruits[10]; // undefined"
      },
      {
        "title": "Modifier un tableau",
        "code": "let fruits = [\"Apple\", \"Banana\"];\n\n// Ajouter à la fin\nfruits.push(\"Orange\"); // retourne 3 (nouvelle longueur)\nconsole.log(fruits); // [\"Apple\", \"Banana\", \"Orange\"]\n\n// Retirer de la fin\nlet lastFruit = fruits.pop(); // retourne \"Orange\"\nconsole.log(fruits); // [\"Apple\", \"Banana\"]\n\n// Ajouter au début\nfruits.unshift(\"Strawberry\"); // retourne 3 (nouvelle longueur)\nconsole.log(fruits); // [\"Strawberry\", \"Apple\", \"Banana\"]\n\n// Retirer du début\nlet firstFruit = fruits.shift(); // retourne \"Strawberry\"\nconsole.log(fruits); // [\"Apple\", \"Banana\"]"
      },
      {
        "title": "Parcourir un tableau",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\n// Boucle for classique\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}\n\n// forEach\nfruits.forEach(function(item, index) {\n  console.log(index, item);\n});\n\n// for...of (ES6)\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n\n// map (crée un nouveau tableau)\nlet upperFruits = fruits.map(fruit => fruit.toUpperCase());\nconsole.log(upperFruits); // [\"APPLE\", \"BANANA\", \"ORANGE\"]"
      },
      {
        "title": "Manipulations avancées",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"];\n\n// Trouver l'index d'un élément\nlet index = fruits.indexOf(\"Banana\"); // 1\n\n// Vérifier si un élément existe\nlet exists = fruits.includes(\"Mango\"); // true\n\n// Supprimer des éléments à un index spécifique\nlet removed = fruits.splice(1, 2); // supprime 2 éléments à partir de l'index 1\nconsole.log(fruits); // [\"Apple\", \"Mango\"]\nconsole.log(removed); // [\"Banana\", \"Orange\"]\n\n// Copier un tableau\nlet copy = fruits.slice();\n\n// Jointure d'éléments\nlet str = fruits.join(\", \"); // \"Apple, Mango\""
      },
      {
        "title": "Filtrer et rechercher",
        "code": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Filtrer les nombres pairs\nlet evens = numbers.filter(num => num % 2 === 0);\nconsole.log(evens); // [2, 4, 6, 8, 10]\n\n// Trouver le premier élément correspondant\nlet firstBigNumber = numbers.find(num => num > 5);\nconsole.log(firstBigNumber); // 6\n\n// Vérifier si tous les éléments satisfont une condition\nlet allPositive = numbers.every(num => num > 0); // true\n\n// Vérifier si au moins un élément satisfait une condition\nlet hasEven = numbers.some(num => num % 2 === 0); // true"
      },
      {
        "title": "Réduire un tableau à une valeur",
        "code": "let numbers = [1, 2, 3, 4, 5];\n\n// Réduire à une somme (de gauche à droite)\nlet sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 15\n\n// Réduire à une somme (de droite à gauche)\nlet sumRight = numbers.reduceRight((total, num) => total + num, 0);\nconsole.log(sumRight); // 15 (même résultat pour l'addition)"
      }
    ],
    "related": ["object", "map", "set", "typedarray"],
    "animation": {
      "steps": [
        {
          "title": "Introduction aux tableaux",
          "text": "Un tableau en JavaScript est une structure de données qui permet de stocker plusieurs valeurs dans une seule variable. Les tableaux sont indexés à partir de 0.",
          "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\nconsole.log(fruits.length); // 3\nconsole.log(fruits[0]); // \"Apple\"\nconsole.log(fruits[1]); // \"Banana\"\nconsole.log(fruits[2]); // \"Orange\"",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>fruits = [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>, <span style='color: green'>\"Orange\"</span>]</pre><pre style='margin:0'>indices:    0         1          2</pre></div>"
          }
        },
        {
          "title": "Ajouter et supprimer des éléments",
          "text": "Les tableaux JavaScript sont dynamiques et leurs méthodes permettent facilement d'ajouter ou supprimer des éléments au début ou à la fin.",
          "code": "let fruits = [\"Apple\", \"Banana\"];\n\n// Ajouter à la fin\nfruits.push(\"Orange\");\n\n// Supprimer de la fin\nlet lastFruit = fruits.pop();\n\n// Ajouter au début\nfruits.unshift(\"Strawberry\");\n\n// Supprimer du début\nlet firstFruit = fruits.shift();",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Initial: [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>]</pre><pre style='margin:0'>Après push: [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>, <span style='color: green'>\"Orange\"</span>]</pre><pre style='margin:0'>Après pop: [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>]</pre><pre style='margin:0'>Après unshift: [<span style='color: green'>\"Strawberry\"</span>, <span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>]</pre><pre style='margin:0'>Après shift: [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>]</pre></div>"
          }
        },
        {
          "title": "Manipulations avec splice",
          "text": "La méthode splice() est polyvalente et permet d'ajouter ou de supprimer des éléments à n'importe quelle position dans le tableau.",
          "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"];\n\n// Suppression: splice(position, nbÉléments)\nlet removed = fruits.splice(1, 2);\n// fruits: [\"Apple\", \"Mango\"]\n// removed: [\"Banana\", \"Orange\"]\n\n// Ajout: splice(position, 0, ...éléments)\nfruits.splice(1, 0, \"Pear\", \"Peach\");\n// fruits: [\"Apple\", \"Pear\", \"Peach\", \"Mango\"]",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>Initial: [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Banana\"</span>, <span style='color: green'>\"Orange\"</span>, <span style='color: green'>\"Mango\"</span>]</pre><pre style='margin:0'>Après splice(1, 2): [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Mango\"</span>]</pre><pre style='margin:0'>Éléments supprimés: [<span style='color: green'>\"Banana\"</span>, <span style='color: green'>\"Orange\"</span>]</pre><pre style='margin:0'>Après splice(1, 0, \"Pear\", \"Peach\"): [<span style='color: green'>\"Apple\"</span>, <span style='color: green'>\"Pear\"</span>, <span style='color: green'>\"Peach\"</span>, <span style='color: green'>\"Mango\"</span>]</pre></div>"
          }
        },
        {
          "title": "Méthodes de parcours et transformation",
          "text": "JavaScript offre plusieurs méthodes pour parcourir, filtrer, transformer et réduire les tableaux, ce qui permet d'écrire un code plus déclaratif et expressif.",
          "code": "let numbers = [1, 2, 3, 4, 5];\n\n// forEach - parcourir\nnumbers.forEach(n => console.log(n));\n\n// map - transformer\nlet squared = numbers.map(n => n * n);\n// [1, 4, 9, 16, 25]\n\n// filter - filtrer\nlet evens = numbers.filter(n => n % 2 === 0);\n// [2, 4]\n\n// reduce - réduire\nlet sum = numbers.reduce((total, n) => total + n, 0);\n// 15",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>numbers = [<span style='color: orange'>1</span>, <span style='color: orange'>2</span>, <span style='color: orange'>3</span>, <span style='color: orange'>4</span>, <span style='color: orange'>5</span>]</pre><pre style='margin:0'></pre><pre style='margin:0'>forEach: affiche chaque nombre</pre><pre style='margin:0'>map: [<span style='color: orange'>1</span>, <span style='color: orange'>4</span>, <span style='color: orange'>9</span>, <span style='color: orange'>16</span>, <span style='color: orange'>25</span>]</pre><pre style='margin:0'>filter: [<span style='color: orange'>2</span>, <span style='color: orange'>4</span>]</pre><pre style='margin:0'>reduce: <span style='color: orange'>15</span> (1+2+3+4+5)</pre></div>"
          }
        },
        {
          "title": "Particularités des tableaux JavaScript",
          "text": "Les tableaux en JavaScript ont des particularités intéressantes : ce sont des objets, leur longueur est dynamique, et ils peuvent contenir des valeurs de types différents.",
          "code": "// Tableaux hétérogènes\nlet mix = [1, \"texte\", true, {clé: \"valeur\"}, [5, 6]];\n\n// Longueur dynamique\nlet arr = [];\narr[0] = \"premier\";\narr[10] = \"dernier\";\nconsole.log(arr.length); // 11\nconsole.log(arr); // [\"premier\", empty × 9, \"dernier\"]\n\n// Modifier la propriété length\narr.length = 5; // Tronque le tableau\nconsole.log(arr); // [\"premier\", empty × 4]",
          "visualDemo": {
            "content": "<div class='html-element'><pre style='margin:0'>mix = [<span style='color: orange'>1</span>, <span style='color: green'>\"texte\"</span>, <span style='color: blue'>true</span>, {<span style='color: green'>clé</span>: <span style='color: green'>\"valeur\"</span>}, [<span style='color: orange'>5</span>, <span style='color: orange'>6</span>]]</pre><pre style='margin:0'></pre><pre style='margin:0'>arr = [<span style='color: green'>\"premier\"</span>, <span style='color: gray'>empty × 9</span>, <span style='color: green'>\"dernier\"</span>]</pre><pre style='margin:0'>arr.length = <span style='color: orange'>11</span></pre><pre style='margin:0'></pre><pre style='margin:0'>Après arr.length = 5:</pre><pre style='margin:0'>arr = [<span style='color: green'>\"premier\"</span>, <span style='color: gray'>empty × 4</span>]</pre></div>"
          }
        }
      ]
    }
  }
}