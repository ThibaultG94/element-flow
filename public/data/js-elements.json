{
  "AggregateError": {
    "name": "AggregateError",
    "category": "errors",
    "description": "Un objet qui représente une erreur lorsque plusieurs erreurs doivent être agrégées en une seule.",
    "syntax": "new AggregateError(errors, message, options)",
    "attributes": [
      {
        "name": "errors",
        "description": "Un itérable d'objets d'erreur à agréger ensemble."
      },
      {
        "name": "message",
        "description": "Un message d'erreur lisible par l'homme. Par défaut: \"\"."
      },
      {
        "name": "options",
        "description": "Un objet facultatif qui peut contenir des propriétés supplémentaires, comme 'cause'."
      }
    ],
    "examples": [
      {
        "title": "Intercepter une AggregateError avec Promise.any()",
        "code": "Promise.any([Promise.reject(new Error(\"une erreur\"))])\n  .catch((e) => {\n    console.log(e instanceof AggregateError); // true\n    console.log(e.message); // \"All Promises rejected\"\n    console.log(e.name); // \"AggregateError\"\n    console.log(e.errors); // [ Error: \"une erreur\" ]\n  });"
      },
      {
        "title": "Créer et lever un AggregateError",
        "code": "try {\n  throw new AggregateError([new Error(\"une erreur\")], \"Plusieurs erreurs détectées\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Plusieurs erreurs détectées\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"une erreur\" ]\n}"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Qu'est-ce que AggregateError?",
          "text": "AggregateError est un type d'erreur spécial introduit en JavaScript qui permet de regrouper plusieurs erreurs en une seule.",
          "code": "// AggregateError hérite de Error\nconst err = new AggregateError([], 'Erreurs multiples');",
          "visualDemo": {
            "content": "<div class='html-element'><code>AggregateError</code> → hérite de → <code>Error</code></div>"
          }
        },
        {
          "title": "Création d'un AggregateError",
          "text": "Tu peux créer un AggregateError en lui passant un tableau d'erreurs et un message descriptif facultatif.",
          "code": "const erreurs = [\n  new Error('Erreur de validation'),\n  new TypeError('Type incorrect')\n];\n\nconst aggregateErr = new AggregateError(erreurs, 'Multiple erreurs détectées');\nconsole.log(aggregateErr.message); // 'Multiple erreurs détectées'\nconsole.log(aggregateErr.errors.length); // 2",
          "visualDemo": {
            "content": "<div class='html-element'><strong>AggregateError</strong><div class='body-element'><strong>errors:</strong> [ Error, TypeError ]<br><strong>message:</strong> \"Multiple erreurs détectées\"<br><strong>name:</strong> \"AggregateError\"</div></div>"
          }
        },
        {
          "title": "Utilisation avec Promise.any()",
          "text": "AggregateError est principalement utilisé par Promise.any() lorsque toutes les promesses sont rejetées, groupant ainsi tous les motifs de rejet.",
          "code": "Promise.any([\n  Promise.reject(new Error('API erreur')),\n  Promise.reject(new Error('Timeout erreur'))\n])\n.catch(erreurs => {\n  console.log(erreurs instanceof AggregateError); // true\n  console.log(erreurs.errors); // [Error: 'API erreur', Error: 'Timeout erreur']\n});",
          "visualDemo": {
            "content": "<div class='html-element'><strong>Promise.any()</strong><div class='head-element'>Rejette avec AggregateError quand toutes les promesses échouent</div><div class='body-element'><ul style='list-style-type: none; padding-left: 0;'><li>✗ Promise 1 (rejetée)</li><li>✗ Promise 2 (rejetée)</li></ul>→ AggregateError contenant les deux raisons de rejet</div></div>"
          }
        },
        {
          "title": "Accès aux erreurs individuelles",
          "text": "Tu peux accéder aux erreurs individuelles via la propriété 'errors' qui contient un tableau de toutes les erreurs agrégées.",
          "code": "try {\n  throw new AggregateError([\n    new Error('Erreur 1'),\n    new Error('Erreur 2'),\n    new Error('Erreur 3')\n  ], 'Trois erreurs sont survenues');\n} catch (e) {\n  // Accès aux erreurs individuelles\n  e.errors.forEach((err, index) => {\n    console.log(`Erreur ${index + 1}: ${err.message}`);\n  });\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #f9f9f9; padding: 1rem; border-radius: 8px; border: 1px solid #ddd;'><span style='color: green;'>// Console output:</span><br>Erreur 1: Erreur 1<br>Erreur 2: Erreur 2<br>Erreur 3: Erreur 3</div>"
          }
        },
        {
          "title": "Compatibilité et support",
          "text": "AggregateError est relativement récent en JavaScript, introduit avec ES2021. Pour les navigateurs plus anciens, un polyfill peut être nécessaire.",
          "code": "// Polyfill simple pour AggregateError\nif (typeof AggregateError === 'undefined') {\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(errors, message) {\n      super(message || '');\n      this.name = 'AggregateError';\n      this.errors = errors;\n    }\n  };\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; padding: 1rem; background: #f5f5f5; border-radius: 8px;'><span style='color: #888;'>// Support du navigateur pour AggregateError:</span><br><br>✅ Chrome 85+<br>✅ Firefox 79+<br>✅ Safari 14+<br>✅ Edge 85+<br>❌ Internet Explorer</div>"
          }
        }
      ]
    },
    "related": ["Error", "TypeError", "Promise"]
  }
}