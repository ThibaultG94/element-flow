{
    "variables": {
      "id": "variables",
      "name": "Variables (let, const, var)",
      "category": "basics",
      "description": "Stockage de valeurs",
      "attributes": [
        { "name": "let", "description": "Variable modifiable avec portée de bloc" },
        { "name": "const", "description": "Constante avec portée de bloc" },
        { "name": "var", "description": "Variable avec portée de fonction" }
      ],
      "syntax": "let maVariable = 'valeur';",
      "examples": [
        {
          "title": "Déclaration de variables",
          "code": "let compteur = 0;\nconst PI = 3.14159;\nvar ancienneVariable = 'texte';"
        }
      ],
      "related": ["functions", "scope"],
      "dateAdded": "2024-02-10T15:30:00Z"
    },
    "functions": {
      "id": "functions",
      "name": "Fonctions",
      "category": "basics",
      "description": "Blocs de code réutilisables",
      "syntax": "function nomFonction(parametre) {\n  // code à exécuter\n  return resultat;\n}",
      "examples": [
        {
          "title": "Fonction déclaration",
          "code": "function calculerSomme(a, b) {\n  return a + b;\n}"
        },
        {
          "title": "Fonction d'expression",
          "code": "const calculerProduit = function(a, b) {\n  return a * b;\n};"
        },
        {
          "title": "Fonction fléchée",
          "code": "const carre = (x) => x * x;"
        }
      ],
      "related": ["variables", "scope", "callbacks"],
      "dateAdded": "2024-01-15T10:20:00Z"
    },
    "querySelector": {
      "id": "querySelector",
      "name": "querySelector()",
      "category": "dom",
      "description": "Sélectionne un élément du DOM",
      "syntax": "const element = document.querySelector(sélecteur);",
      "examples": [
        {
          "title": "Sélection par classe",
          "code": "const element = document.querySelector('.ma-classe');"
        },
        {
          "title": "Sélection par ID",
          "code": "const element = document.querySelector('#mon-id');"
        },
        {
          "title": "Sélection complexe",
          "code": "const element = document.querySelector('ul li:first-child');"
        }
      ],
      "related": ["querySelectorAll", "getElementById", "createElement"],
      "dateAdded": "2024-03-05T09:45:00Z"
    },
    "addEventListener": {
      "id": "addEventListener",
      "name": "addEventListener()",
      "category": "events",
      "description": "Ajoute un gestionnaire d'événement",
      "syntax": "element.addEventListener(type, callback);",
      "examples": [
        {
          "title": "Événement clic",
          "code": "document.getElementById('bouton').addEventListener('click', function() {\n  console.log('Bouton cliqué !');\n});"
        },
        {
          "title": "Avec fonction fléchée",
          "code": "const input = document.querySelector('input');\ninput.addEventListener('input', (e) => {\n  console.log(e.target.value);\n});"
        }
      ],
      "related": ["removeEventListener", "querySelector", "Event"],
      "dateAdded": "2024-03-20T14:15:00Z"
    },
    "promises": {
      "id": "promises",
      "name": "Promises",
      "category": "async",
      "description": "Gestion d'opérations asynchrones",
      "syntax": "new Promise((resolve, reject) => {\n  // code asynchrone\n});",
      "examples": [
        {
          "title": "Création d'une promesse",
          "code": "const maPromesse = new Promise((resolve, reject) => {\n  setTimeout(() => {\n    resolve('Opération réussie');\n  }, 1000);\n});\n\nmaPromesse.then(resultat => {\n  console.log(resultat);\n}).catch(erreur => {\n  console.error(erreur);\n});"
        }
      ],
      "related": ["async-await", "fetch", "setTimeout"],
      "dateAdded": "2024-02-28T11:30:00Z"
    },
    "fetch": {
      "id": "fetch",
      "name": "fetch()",
      "category": "api",
      "description": "Requêtes HTTP",
      "syntax": "fetch(url).then(response => response.json());",
      "examples": [
        {
          "title": "Récupérer des données JSON",
          "code": "fetch('https://api.exemple.com/donnees')\n  .then(response => response.json())\n  .then(data => {\n    console.log(data);\n  })\n  .catch(error => {\n    console.error('Erreur:', error);\n  });"
        },
        {
          "title": "Envoyer des données",
          "code": "fetch('https://api.exemple.com/donnees', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    nom: 'Jean',\n    age: 30\n  })\n});"
        }
      ],
      "related": ["promises", "async-await", "API"],
      "dateAdded": "2024-04-05T16:45:00Z"
    }
  }