{
  "AggregateError": {
    "name": "AggregateError",
    "category": "errors",
    "description": "Un objet qui représente une erreur lorsque plusieurs erreurs doivent être agrégées en une seule.",
    "syntax": "new AggregateError(errors, message, options)",
    "attributes": [
      {
        "name": "errors",
        "description": "Un itérable d'objets d'erreur à agréger ensemble."
      },
      {
        "name": "message",
        "description": "Un message d'erreur lisible par l'homme. Par défaut: \"\"."
      },
      {
        "name": "options",
        "description": "Un objet facultatif qui peut contenir des propriétés supplémentaires, comme 'cause'."
      }
    ],
    "examples": [
      {
        "title": "Intercepter une AggregateError avec Promise.any()",
        "code": "Promise.any([Promise.reject(new Error(\"une erreur\"))])\n  .catch((e) => {\n    console.log(e instanceof AggregateError); // true\n    console.log(e.message); // \"All Promises rejected\"\n    console.log(e.name); // \"AggregateError\"\n    console.log(e.errors); // [ Error: \"une erreur\" ]\n  });"
      },
      {
        "title": "Créer et lever un AggregateError",
        "code": "try {\n  throw new AggregateError([new Error(\"une erreur\")], \"Plusieurs erreurs détectées\");\n} catch (e) {\n  console.log(e instanceof AggregateError); // true\n  console.log(e.message); // \"Plusieurs erreurs détectées\"\n  console.log(e.name); // \"AggregateError\"\n  console.log(e.errors); // [ Error: \"une erreur\" ]\n}"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Qu'est-ce que AggregateError?",
          "text": "AggregateError est un type d'erreur spécial introduit en JavaScript qui permet de regrouper plusieurs erreurs en une seule.",
          "code": "// AggregateError hérite de Error\nconst err = new AggregateError([], 'Erreurs multiples');",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='display: flex; align-items: center; justify-content: space-between;'><div style='padding: 8px; background-color: #252526; border-radius: 4px; color: #f44747;'>AggregateError</div><div style='display: flex; align-items: center; margin: 0 16px;'><svg width='24' height='24' viewBox='0 0 24 24' fill='none'><path d='M5 12h14M12 5l7 7-7 7' stroke='#569cd6' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg></div><div style='padding: 8px; background-color: #252526; border-radius: 4px; color: #f44747;'>Error</div></div><div style='margin-top: 12px; font-size: 14px; color: #6a9955; font-style: italic;'>// AggregateError est un type d'erreur qui permet de regrouper plusieurs erreurs</div></div>"
          }
        },
        {
          "title": "Création d'un AggregateError",
          "text": "Tu peux créer un AggregateError en lui passant un tableau d'erreurs et un message descriptif facultatif.",
          "code": "const erreurs = [\n  new Error('Erreur de validation'),\n  new TypeError('Type incorrect')\n];\n\nconst aggregateErr = new AggregateError(erreurs, 'Multiple erreurs détectées');\nconsole.log(aggregateErr.message); // 'Multiple erreurs détectées'\nconsole.log(aggregateErr.errors.length); // 2",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Construction d'un AggregateError</div><div style='background-color: #252526; padding: 12px; border-radius: 4px; margin-bottom: 12px;'><span style='color: #569cd6;'>new</span> <span style='color: #4ec9b0;'>AggregateError</span>(<span style='color: #dcdcaa;'>erreurs</span>, <span style='color: #ce9178;'>\"Multiple erreurs détectées\"</span>)</div><div style='background-color: #252526; padding: 12px; border-radius: 4px;'><pre style='margin: 0;'><span style='color: #9cdcfe;'>aggregateErr</span> = { <span style='color: #9cdcfe;'>name</span>: <span style='color: #ce9178;'>\"AggregateError\"</span>, <span style='color: #9cdcfe;'>message</span>: <span style='color: #ce9178;'>\"Multiple erreurs détectées\"</span>, <span style='color: #9cdcfe;'>errors</span>: [ <span style='color: #f44747;'>Error</span>(<span style='color: #ce9178;'>\"Erreur de validation\"</span>), <span style='color: #f44747;'>TypeError</span>(<span style='color: #ce9178;'>\"Type incorrect\"</span>)]}</pre></div></div>"
          }
        },
        {
          "title": "Utilisation avec Promise.any()",
          "text": "AggregateError est principalement utilisé par Promise.any() lorsque toutes les promesses sont rejetées, groupant ainsi tous les motifs de rejet.",
          "code": "Promise.any([\n  Promise.reject(new Error('API erreur')),\n  Promise.reject(new Error('Timeout erreur'))\n])\n.catch(erreurs => {\n  console.log(erreurs instanceof AggregateError); // true\n  console.log(erreurs.errors); // [Error: 'API erreur', Error: 'Timeout erreur']\n});",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Promise.any() avec AggregateError</div><div style='display: flex; flex-direction: column; gap: 8px;'><div style='background-color: #252526; padding: 8px; border-radius: 4px; color: #f44747; text-align: center;'><span style='color: #9cdcfe;'>Promise.reject</span>(<span style='color: #f44747;'>Error</span>(<span style='color: #ce9178;'>\"API erreur\"</span>))</div><div style='background-color: #252526; padding: 8px; border-radius: 4px; color: #f44747; text-align: center;'><span style='color: #9cdcfe;'>Promise.reject</span>(<span style='color: #f44747;'>Error</span>(<span style='color: #ce9178;'>\"Timeout erreur\"</span>))</div><div style='text-align: center; margin: 8px 0;'><svg width='24' height='24' viewBox='0 0 24 24' fill='none'><path d='M19 14l-7 7-7-7' stroke='#f44747' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'/></svg></div><div style='background-color: #252526; padding: 12px; border-radius: 4px; color: #f44747;'><span style='color: #4ec9b0;'>AggregateError</span>: <span style='color: #ce9178;'>\"All Promises rejected\"</span><div style='margin-top: 8px; margin-left: 12px; color: #d4d4d4;'><span style='color: #9cdcfe;'>errors</span>: [<span style='color: #f44747;'>Error</span>(<span style='color: #ce9178;'>\"API erreur\"</span>), <span style='color: #f44747;'>Error</span>(<span style='color: #ce9178;'>\"Timeout erreur\"</span>)]</div></div></div></div>"
          }
        },
        {
          "title": "Accès aux erreurs individuelles",
          "text": "Tu peux accéder aux erreurs individuelles via la propriété 'errors' qui contient un tableau de toutes les erreurs agrégées.",
          "code": "try {\n  throw new AggregateError([\n    new Error('Erreur 1'),\n    new Error('Erreur 2'),\n    new Error('Erreur 3')\n  ], 'Trois erreurs sont survenues');\n} catch (e) {\n  // Accès aux erreurs individuelles\n  e.errors.forEach((err, index) => {\n    console.log(`Erreur ${index + 1}: ${err.message}`);\n  });\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Accès aux erreurs individuelles</div><div style='background-color: #252526; padding: 12px; border-radius: 4px; margin-bottom: 12px;'><span style='color: #c586c0;'>try</span> {<br>  <span style='color: #c586c0;'>throw</span> <span style='color: #569cd6;'>new</span> <span style='color: #4ec9b0;'>AggregateError</span>([...], <span style='color: #ce9178;'>\"...\"</span>);<br>} <span style='color: #c586c0;'>catch</span> (e) {<br>  e.errors.<span style='color: #dcdcaa;'>forEach</span>((err, index) => { ... });<br>}</div><div style='background-color: #1e1e1e; padding: 12px; border-radius: 4px;'><div style='color: #6a9955;'>// Console output:</div><div style='padding: 8px; background-color: #0d0d0d; border-radius: 4px; margin-top: 8px;'><div><span style='color: #dcdcaa;'>Erreur</span> 1: <span style='color: #ce9178;'>Erreur 1</span></div><div><span style='color: #dcdcaa;'>Erreur</span> 2: <span style='color: #ce9178;'>Erreur 2</span></div><div><span style='color: #dcdcaa;'>Erreur</span> 3: <span style='color: #ce9178;'>Erreur 3</span></div></div></div></div>"
          }
        },
        {
          "title": "Compatibilité et support",
          "text": "AggregateError est relativement récent en JavaScript, introduit avec ES2021. Pour les navigateurs plus anciens, un polyfill peut être nécessaire.",
          "code": "// Polyfill simple pour AggregateError\nif (typeof AggregateError === 'undefined') {\n  globalThis.AggregateError = class AggregateError extends Error {\n    constructor(errors, message) {\n      super(message || '');\n      this.name = 'AggregateError';\n      this.errors = errors;\n    }\n  };\n}",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Support des navigateurs</div><div style='display: flex; gap: 12px; flex-wrap: wrap;'><div style='flex: 1; min-width: 130px; background-color: #252526; padding: 10px; border-radius: 4px;'><div style='text-align: center; font-weight: bold; margin-bottom: 8px;'>Chrome</div><div style='text-align: center; font-size: 14px;'><span style='color: #6a9955;'>✓</span> 85+</div></div><div style='flex: 1; min-width: 130px; background-color: #252526; padding: 10px; border-radius: 4px;'><div style='text-align: center; font-weight: bold; margin-bottom: 8px;'>Firefox</div><div style='text-align: center; font-size: 14px;'><span style='color: #6a9955;'>✓</span> 79+</div></div><div style='flex: 1; min-width: 130px; background-color: #252526; padding: 10px; border-radius: 4px;'><div style='text-align: center; font-weight: bold; margin-bottom: 8px;'>Safari</div><div style='text-align: center; font-size: 14px;'><span style='color: #6a9955;'>✓</span> 14+</div></div><div style='flex: 1; min-width: 130px; background-color: #252526; padding: 10px; border-radius: 4px;'><div style='text-align: center; font-weight: bold; margin-bottom: 8px;'>Edge</div><div style='text-align: center; font-size: 14px;'><span style='color: #6a9955;'>✓</span> 85+</div></div><div style='flex: 1; min-width: 130px; background-color: #252526; padding: 10px; border-radius: 4px;'><div style='text-align: center; font-weight: bold; margin-bottom: 8px;'>IE</div><div style='text-align: center; font-size: 14px;'><span style='color: #f44747;'>✗</span> Non supporté</div></div></div></div>"
          }
        }
      ]
    },
    "exercises": [
      {
        "type": "qcm",
        "question": "Quel est le principal cas d'utilisation de l'objet AggregateError en JavaScript ?",
        "options": [
          "Pour regrouper plusieurs opérations asynchrones réussies",
          "Pour capturer des erreurs de syntaxe",
          "Pour regrouper plusieurs erreurs en une seule",
          "Pour créer des erreurs personnalisées avec des propriétés"
        ],
        "correctAnswer": 2,
        "explanation": "AggregateError a été conçu spécifiquement pour regrouper plusieurs erreurs en un seul objet d'erreur, ce qui est particulièrement utile lors de l'utilisation de méthodes comme Promise.any() qui peuvent échouer avec plusieurs raisons de rejet."
      },
      {
        "type": "vrai_faux",
        "question": "L'objet AggregateError est disponible dans toutes les versions de JavaScript depuis sa création.",
        "correctAnswer": false,
        "explanation": "Faux. AggregateError est une fonctionnalité relativement récente, introduite dans ECMAScript 2021 (ES12). Les navigateurs ou environnements JavaScript plus anciens peuvent nécessiter un polyfill pour prendre en charge cette fonctionnalité."
      },
      {
        "type": "completion",
        "question": "Complétez le code pour créer un AggregateError avec trois erreurs et un message personnalisé :",
        "codeTemplate": "try {\n  throw new [?]([\n    new Error('Erreur de validation'),\n    new TypeError('Type invalide'),\n    new RangeError('Valeur hors limites')\n  ], 'Plusieurs erreurs détectées lors de la validation');\n} catch (err) {\n  console.log(err.name);\n  console.log(err.message);\n  console.log(err.errors.length);\n}",
        "correctAnswer": "AggregateError",
        "explanation": "L'objet AggregateError est créé avec le constructeur 'AggregateError' qui prend un tableau d'erreurs comme premier argument et un message d'erreur comme second argument."
      },
      {
        "type": "debugging",
        "question": "Corrigez ce code pour qu'il utilise correctement AggregateError avec Promise.any() :",
        "buggyCode": "async function fetchData() {\n  try {\n    const result = await Promise.any([\n      Promise.reject(new Error('API 1 failed')),\n      Promise.reject(new Error('API 2 failed'))\n    ]);\n    return result;\n  } catch (error) {\n    console.log(error.name);  // Devrait être 'AggregateError'\n    console.log(error.message);  // Message d'erreur par défaut\n    error.forEach(err => {  // Erreur! La propriété 'errors' est manquante\n      console.log(err.message);\n    });\n  }\n}",
        "correctAnswer": "async function fetchData() {\n  try {\n    const result = await Promise.any([\n      Promise.reject(new Error('API 1 failed')),\n      Promise.reject(new Error('API 2 failed'))\n    ]);\n    return result;\n  } catch (error) {\n    console.log(error.name);  // Devrait être 'AggregateError'\n    console.log(error.message);  // Message d'erreur par défaut\n    error.errors.forEach(err => {  // Correction: utiliser error.errors\n      console.log(err.message);\n    });\n  }\n}",
        "explanation": "La correction principale est de remplacer `error.forEach(err => {` par `error.errors.forEach(err => {`. L'objet AggregateError contient un tableau d'erreurs dans sa propriété 'errors', et c'est ce tableau qu'il faut parcourir pour accéder aux erreurs individuelles."
      }
    ],
    "related": ["Error", "TypeError", "Promise"]
  },
  "array": {
    "name": "Array",
    "category": "objects",
    "description": "L'objet global Array est utilisé pour créer des tableaux. Les tableaux sont des objets de haut-niveau semblables à des listes dont la longueur et le type des éléments ne sont pas fixés.",
    "syntax": "// Notations littérales\nlet arr1 = [];\nlet arr2 = [element1, element2, ...];\n\n// Constructeur\nlet arr3 = new Array();\nlet arr4 = new Array(element1, element2, ...);\nlet arr5 = new Array(arrayLength);",
    "attributes": [
      {
        "name": "length",
        "description": "Propriété qui indique le nombre d'éléments dans le tableau. Cette propriété est liée aux propriétés numériques du tableau et peut être modifiée directement."
      },
      {
        "name": "prototype",
        "description": "Permet d'ajouter des propriétés et méthodes à tous les objets Array."
      },
      {
        "name": "[@@species]",
        "description": "Fonction de construction utilisée pour créer les objets dérivés."
      },
      {
        "name": "[@@unscopables]",
        "description": "Symbole contenant les noms des propriétés à exclure d'une portée de liaison avec with."
      }
    ],
    "examples": [
      {
        "title": "Créer un tableau",
        "code": "// Tableau littéral\nlet fruits = [\"Apple\", \"Banana\"];\nconsole.log(fruits.length); // 2\n\n// Avec le constructeur\nlet numbers = new Array(1, 2, 3, 4, 5);\nconsole.log(numbers.length); // 5\n\n// Tableau vide avec longueur spécifiée\nlet emptyArray = new Array(5);\nconsole.log(emptyArray.length); // 5"
      },
      {
        "title": "Accéder aux éléments",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\n// Accès par index (commence à 0)\nlet first = fruits[0]; // \"Apple\"\nlet second = fruits[1]; // \"Banana\"\n\n// Dernier élément\nlet last = fruits[fruits.length - 1]; // \"Orange\"\n\n// Index hors limites\nlet nonExistent = fruits[10]; // undefined"
      },
      {
        "title": "Modifier un tableau",
        "code": "let fruits = [\"Apple\", \"Banana\"];\n\n// Ajouter à la fin\nfruits.push(\"Orange\"); // retourne 3 (nouvelle longueur)\nconsole.log(fruits); // [\"Apple\", \"Banana\", \"Orange\"]\n\n// Retirer de la fin\nlet lastFruit = fruits.pop(); // retourne \"Orange\"\nconsole.log(fruits); // [\"Apple\", \"Banana\"]\n\n// Ajouter au début\nfruits.unshift(\"Strawberry\"); // retourne 3 (nouvelle longueur)\nconsole.log(fruits); // [\"Strawberry\", \"Apple\", \"Banana\"]\n\n// Retirer du début\nlet firstFruit = fruits.shift(); // retourne \"Strawberry\"\nconsole.log(fruits); // [\"Apple\", \"Banana\"]"
      },
      {
        "title": "Parcourir un tableau",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\n// Boucle for classique\nfor (let i = 0; i < fruits.length; i++) {\n  console.log(fruits[i]);\n}\n\n// forEach\nfruits.forEach(function(item, index) {\n  console.log(index, item);\n});\n\n// for...of (ES6)\nfor (let fruit of fruits) {\n  console.log(fruit);\n}\n\n// map (crée un nouveau tableau)\nlet upperFruits = fruits.map(fruit => fruit.toUpperCase());\nconsole.log(upperFruits); // [\"APPLE\", \"BANANA\", \"ORANGE\"]"
      },
      {
        "title": "Manipulations avancées",
        "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"];\n\n// Trouver l'index d'un élément\nlet index = fruits.indexOf(\"Banana\"); // 1\n\n// Vérifier si un élément existe\nlet exists = fruits.includes(\"Mango\"); // true\n\n// Supprimer des éléments à un index spécifique\nlet removed = fruits.splice(1, 2); // supprime 2 éléments à partir de l'index 1\nconsole.log(fruits); // [\"Apple\", \"Mango\"]\nconsole.log(removed); // [\"Banana\", \"Orange\"]\n\n// Copier un tableau\nlet copy = fruits.slice();\n\n// Jointure d'éléments\nlet str = fruits.join(\", \"); // \"Apple, Mango\""
      },
      {
        "title": "Filtrer et rechercher",
        "code": "let numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\n// Filtrer les nombres pairs\nlet evens = numbers.filter(num => num % 2 === 0);\nconsole.log(evens); // [2, 4, 6, 8, 10]\n\n// Trouver le premier élément correspondant\nlet firstBigNumber = numbers.find(num => num > 5);\nconsole.log(firstBigNumber); // 6\n\n// Vérifier si tous les éléments satisfont une condition\nlet allPositive = numbers.every(num => num > 0); // true\n\n// Vérifier si au moins un élément satisfait une condition\nlet hasEven = numbers.some(num => num % 2 === 0); // true"
      },
      {
        "title": "Réduire un tableau à une valeur",
        "code": "let numbers = [1, 2, 3, 4, 5];\n\n// Réduire à une somme (de gauche à droite)\nlet sum = numbers.reduce((total, num) => total + num, 0);\nconsole.log(sum); // 15\n\n// Réduire à une somme (de droite à gauche)\nlet sumRight = numbers.reduceRight((total, num) => total + num, 0);\nconsole.log(sumRight); // 15 (même résultat pour l'addition)"
      }
    ],
    "related": ["object", "map", "set", "typedarray"],
    "animation": {
      "steps": [
        {
          "title": "Introduction aux tableaux",
          "text": "Un tableau en JavaScript est une structure de données qui permet de stocker plusieurs valeurs dans une seule variable. Les tableaux sont indexés à partir de 0.",
          "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\"];\n\nconsole.log(fruits.length); // 3\nconsole.log(fruits[0]); // \"Apple\"\nconsole.log(fruits[1]); // \"Banana\"\nconsole.log(fruits[2]); // \"Orange\"",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Structure d'un tableau</div><div style='background-color: #252526; padding: 12px; border-radius: 4px; margin-bottom: 10px;'><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>fruits</span> = [<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>, <span style='color: #ce9178;'>\"Orange\"</span>];</div><div style='display: flex; margin-top: 16px;'><div style='display: flex; flex-direction: column; flex: 1;'><div style='text-align: center; color: #9cdcfe; margin-bottom: 4px;'>Indices</div><div style='display: flex;'><div style='flex: 1; text-align: center; padding: 8px; background-color: #333333; border-right: 1px solid #1e1e1e;'>0</div><div style='flex: 1; text-align: center; padding: 8px; background-color: #333333; border-right: 1px solid #1e1e1e;'>1</div><div style='flex: 1; text-align: center; padding: 8px; background-color: #333333;'>2</div></div></div></div><div style='display: flex; margin-top: 4px;'><div style='display: flex; flex-direction: column; flex: 1;'><div style='text-align: center; color: #9cdcfe; margin-bottom: 4px;'>Valeurs</div><div style='display: flex;'><div style='flex: 1; text-align: center; padding: 8px; background-color: #252526; border-right: 1px solid #1e1e1e; color: #ce9178;'>\"Apple\"</div><div style='flex: 1; text-align: center; padding: 8px; background-color: #252526; border-right: 1px solid #1e1e1e; color: #ce9178;'>\"Banana\"</div><div style='flex: 1; text-align: center; padding: 8px; background-color: #252526; color: #ce9178;'>\"Orange\"</div></div></div></div></div>"
          }
        },
        {
          "title": "Méthodes pour ajouter et supprimer des éléments",
          "text": "Les tableaux JavaScript disposent de méthodes pratiques pour ajouter ou supprimer des éléments au début ou à la fin.",
          "code": "let fruits = [\"Apple\", \"Banana\"];\n\n// Ajouter à la fin\nfruits.push(\"Orange\");       // retourne 3\n\n// Supprimer de la fin\nlet last = fruits.pop();    // retourne \"Orange\"\n\n// Ajouter au début\nfruits.unshift(\"Strawberry\"); // retourne 3\n\n// Supprimer du début\nlet first = fruits.shift(); // retourne \"Strawberry\"",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Méthodes d'ajout et de suppression</div><div style='display: flex; flex-direction: column; gap: 16px;'><div style='display: flex; align-items: center;'><div style='width: 100px; text-align: right; padding-right: 12px; color: #569cd6;'>Initial:</div><div style='padding: 8px 12px; background-color: #252526; border-radius: 4px; flex-grow: 1;'>[<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>]</div></div><div style='display: flex; align-items: center;'><div style='width: 100px; text-align: right; padding-right: 12px; color: #dcdcaa;'>push():</div><div style='padding: 8px 12px; background-color: #252526; border-radius: 4px; flex-grow: 1;'>[<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>, <span style='color: #ce9178; font-weight: bold;'>\"Orange\"</span>]</div><div style='margin-left: 8px; color: #6a9955;'>// retourne 3</div></div><div style='display: flex; align-items: center;'><div style='width: 100px; text-align: right; padding-right: 12px; color: #dcdcaa;'>pop():</div><div style='padding: 8px 12px; background-color: #252526; border-radius: 4px; flex-grow: 1;'>[<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>]</div><div style='margin-left: 8px; color: #6a9955;'>// retourne \"Orange\"</div></div><div style='display: flex; align-items: center;'><div style='width: 100px; text-align: right; padding-right: 12px; color: #dcdcaa;'>unshift():</div><div style='padding: 8px 12px; background-color: #252526; border-radius: 4px; flex-grow: 1;'>[<span style='color: #ce9178; font-weight: bold;'>\"Strawberry\"</span>, <span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>]</div><div style='margin-left: 8px; color: #6a9955;'>// retourne 3</div></div><div style='display: flex; align-items: center;'><div style='width: 100px; text-align: right; padding-right: 12px; color: #dcdcaa;'>shift():</div><div style='padding: 8px 12px; background-color: #252526; border-radius: 4px; flex-grow: 1;'>[<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>]</div><div style='margin-left: 8px; color: #6a9955;'>// retourne \"Strawberry\"</div></div></div></div>"
          }
        },
        {
          "title": "La méthode splice() pour manipuler les tableaux",
          "text": "La méthode splice() est très polyvalente et permet d'ajouter, supprimer ou remplacer des éléments à n'importe quelle position dans le tableau.",
          "code": "let fruits = [\"Apple\", \"Banana\", \"Orange\", \"Mango\"];\n\n// Supprimer des éléments\nlet removed = fruits.splice(1, 2);\n// fruits: [\"Apple\", \"Mango\"]\n// removed: [\"Banana\", \"Orange\"]\n\n// Ajouter des éléments sans supprimer\nfruits.splice(1, 0, \"Pear\", \"Peach\");\n// fruits: [\"Apple\", \"Pear\", \"Peach\", \"Mango\"]\n\n// Remplacer des éléments\nfruits.splice(1, 2, \"Cherry\");\n// fruits: [\"Apple\", \"Cherry\", \"Mango\"]",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Méthode splice()</div><div style='margin-bottom: 12px; padding: 10px; background-color: #252526; border-radius: 4px;'><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>fruits</span> = [<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Banana\"</span>, <span style='color: #ce9178;'>\"Orange\"</span>, <span style='color: #ce9178;'>\"Mango\"</span>];</div><div style='display: flex; flex-direction: column; gap: 16px; margin-top: 16px;'><div><div style='color: #569cd6; margin-bottom: 8px; font-weight: bold;'>Supprimer des éléments:</div><div style='display: flex; gap: 12px; align-items: center;'><div style='color: #dcdcaa;'>splice(1, 2)</div><div style='flex-grow: 1; display: flex; flex-direction: column; gap: 8px;'><div style='padding: 8px; background-color: #252526; border-radius: 4px;'><span style='color: #9cdcfe;'>fruits</span>: [<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178;'>\"Mango\"</span>]</div><div style='padding: 8px; background-color: #252526; border-radius: 4px;'><span style='color: #9cdcfe;'>removed</span>: [<span style='color: #ce9178;'>\"Banana\"</span>, <span style='color: #ce9178;'>\"Orange\"</span>]</div></div></div></div><div><div style='color: #569cd6; margin-bottom: 8px; font-weight: bold;'>Ajouter sans supprimer:</div><div style='display: flex; gap: 12px; align-items: center;'><div style='color: #dcdcaa;'>splice(1, 0, \"Pear\", \"Peach\")</div><div style='flex-grow: 1;'><div style='padding: 8px; background-color: #252526; border-radius: 4px;'><span style='color: #9cdcfe;'>fruits</span>: [<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178; font-weight: bold;'>\"Pear\"</span>, <span style='color: #ce9178; font-weight: bold;'>\"Peach\"</span>, <span style='color: #ce9178;'>\"Mango\"</span>]</div></div></div></div><div><div style='color: #569cd6; margin-bottom: 8px; font-weight: bold;'>Remplacer des éléments:</div><div style='display: flex; gap: 12px; align-items: center;'><div style='color: #dcdcaa;'>splice(1, 2, \"Cherry\")</div><div style='flex-grow: 1;'><div style='padding: 8px; background-color: #252526; border-radius: 4px;'><span style='color: #9cdcfe;'>fruits</span>: [<span style='color: #ce9178;'>\"Apple\"</span>, <span style='color: #ce9178; font-weight: bold;'>\"Cherry\"</span>, <span style='color: #ce9178;'>\"Mango\"</span>]</div></div></div></div></div></div>"
          }
        },
        {
          "title": "Méthodes de parcours et transformation",
          "text": "JavaScript offre de nombreuses méthodes pour parcourir et transformer les tableaux. Ces approches fonctionnelles rendent le code plus lisible et expressif.",
          "code": "let numbers = [1, 2, 3, 4, 5];\n\n// forEach - Parcourir sans retourner de valeur\nnumbers.forEach(n => console.log(n * 2));\n\n// map - Transformer chaque élément\nlet doubled = numbers.map(n => n * 2); // [2, 4, 6, 8, 10]\n\n// filter - Filtrer les éléments\nlet evens = numbers.filter(n => n % 2 === 0); // [2, 4]\n\n// find - Trouver le premier élément qui correspond\nlet found = numbers.find(n => n > 3); // 4\n\n// reduce - Réduire à une valeur unique\nlet sum = numbers.reduce((acc, n) => acc + n, 0); // 15",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Méthodes fonctionnelles</div><div style='background-color: #252526; padding: 10px; border-radius: 4px; margin-bottom: 16px;'><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>numbers</span> = [<span style='color: #b5cea8;'>1</span>, <span style='color: #b5cea8;'>2</span>, <span style='color: #b5cea8;'>3</span>, <span style='color: #b5cea8;'>4</span>, <span style='color: #b5cea8;'>5</span>];</div><div style='display: grid; grid-template-columns: 1fr 1fr; gap: 12px;'><div style='background-color: #252526; padding: 12px; border-radius: 4px;'><div style='color: #dcdcaa; margin-bottom: 6px;'>forEach()</div><div><span style='color: #9cdcfe;'>numbers</span>.<span style='color: #dcdcaa;'>forEach</span>(<span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>=></span> <span style='color: #dcdcaa;'>console.log</span>(<span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>*</span> <span style='color: #b5cea8;'>2</span>));</div><div style='color: #6a9955; margin-top: 6px;'>// Affiche: 2, 4, 6, 8, 10</div></div><div style='background-color: #252526; padding: 12px; border-radius: 4px;'><div style='color: #dcdcaa; margin-bottom: 6px;'>map()</div><div><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>doubled</span> = <span style='color: #9cdcfe;'>numbers</span>.<span style='color: #dcdcaa;'>map</span>(<span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>=></span> <span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>*</span> <span style='color: #b5cea8;'>2</span>);</div><div style='color: #6a9955; margin-top: 6px;'>// [2, 4, 6, 8, 10]</div></div><div style='background-color: #252526; padding: 12px; border-radius: 4px;'><div style='color: #dcdcaa; margin-bottom: 6px;'>filter()</div><div><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>evens</span> = <span style='color: #9cdcfe;'>numbers</span>.<span style='color: #dcdcaa;'>filter</span>(<span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>=></span> <span style='color: #9cdcfe;'>n</span> <span style='color: #569cd6;'>%</span> <span style='color: #b5cea8;'>2</span> <span style='color: #569cd6;'>===</span> <span style='color: #b5cea8;'>0</span>);</div><div style='color: #6a9955; margin-top: 6px;'>// [2, 4]</div></div><div style='background-color: #252526; padding: 12px; border-radius: 4px;'><div style='color: #dcdcaa; margin-bottom: 6px;'>reduce()</div><div><span style='color: #569cd6;'>let</span> <span style='color: #9cdcfe;'>sum</span> = <span style='color: #9cdcfe;'>numbers</span>.<span style='color: #dcdcaa;'>reduce</span>((<span style='color: #9cdcfe;'>acc</span>, <span style='color: #9cdcfe;'>n</span>) <span style='color: #569cd6;'>=></span> <span style='color: #9cdcfe;'>acc</span> <span style='color: #569cd6;'>+</span> <span style='color: #9cdcfe;'>n</span>, <span style='color: #b5cea8;'>0</span>);</div><div style='color: #6a9955; margin-top: 6px;'>// 15</div></div></div></div>"
          }
        },
        {
          "title": "Particularités des tableaux JavaScript",
          "text": "Les tableaux en JavaScript ont des caractéristiques spéciales : ce sont des objets, leur longueur est dynamique, et ils peuvent contenir des éléments de types différents.",
          "code": "// Types hétérogènes dans un tableau\nlet mixed = [42, \"texte\", true, {key: \"value\"}, [1, 2]];\n\n// Trous dans un tableau\nlet sparse = [];\nsparse[0] = \"premier\";\nsparse[3] = \"quatrième\";\nconsole.log(sparse.length); // 4\nconsole.log(sparse); // ['premier', empty × 2, 'quatrième']\n\n// Modification de la longueur\nlet arr = [1, 2, 3, 4, 5];\narr.length = 3; // Tronque le tableau\nconsole.log(arr); // [1, 2, 3]",
          "visualDemo": {
            "content": "<div style='font-family: monospace; background-color: #1e1e1e; color: #d4d4d4; padding: 16px; border-radius: 6px; overflow: hidden;'><div style='margin-bottom: 16px; color: #9cdcfe; font-size: 15px; border-bottom: 1px solid #3e3e3e; padding-bottom: 8px;'>Caractéristiques spéciales</div><div style='display: flex; flex-direction: column; gap: 16px;'><div><div style='color: #dcdcaa; margin-bottom: 8px;'>Types hétérogènes</div><div style='background-color: #252526; padding: 10px; border-radius: 4px;'><span style='color: #9cdcfe;'>mixed</span> = [<span style='color: #b5cea8;'>42</span>, <span style='color: #ce9178;'>\"texte\"</span>, <span style='color: #569cd6;'>true</span>, {<span style='color: #9cdcfe;'>key</span>: <span style='color: #ce9178;'>\"value\"</span>}, [<span style='color: #b5cea8;'>1</span>, <span style='color: #b5cea8;'>2</span>]]</div></div><div><div style='color: #dcdcaa; margin-bottom: 8px;'>Tableau clairsemé</div><div style='background-color: #252526; padding: 10px; border-radius: 4px; margin-bottom: 8px;'><span style='color: #9cdcfe;'>sparse</span> = [<span style='color: #ce9178;'>\"premier\"</span>, <span style='color: #6a9955;'>empty × 2</span>, <span style='color: #ce9178;'>\"quatrième\"</span>]</div><div>Indices: <span style='color: #9cdcfe;'>[0, 1, 2, 3]</span></div><div>Longueur: <span style='color: #b5cea8;'>4</span></div></div><div><div style='color: #dcdcaa; margin-bottom: 8px;'>Modification de la longueur</div><div style='display: flex; gap: 16px; align-items: center;'><div style='flex: 1;'><div style='background-color: #252526; padding: 8px; border-radius: 4px; margin-bottom: 8px;'><span style='color: #9cdcfe;'>arr</span> = [<span style='color: #b5cea8;'>1</span>, <span style='color: #b5cea8;'>2</span>, <span style='color: #b5cea8;'>3</span>, <span style='color: #b5cea8;'>4</span>, <span style='color: #b5cea8;'>5</span>]</div></div><div style='color: #dcdcaa;'><span style='color: #9cdcfe;'>arr</span>.<span style='color: #9cdcfe;'>length</span> = <span style='color: #b5cea8;'>3</span></div><div style='flex: 1;'><div style='background-color: #252526; padding: 8px; border-radius: 4px;'><span style='color: #9cdcfe;'>arr</span> = [<span style='color: #b5cea8;'>1</span>, <span style='color: #b5cea8;'>2</span>, <span style='color: #b5cea8;'>3</span>]</div></div></div></div></div></div>"
          }
        }
      ]
    },
    "exercises": [
      {
        "type": "qcm",
        "question": "Quelle méthode permet d'ajouter un élément à la fin d'un tableau en JavaScript ?",
        "options": [
          "array.add()",
          "array.push()",
          "array.append()",
          "array.insert()"
        ],
        "correctAnswer": 1,
        "explanation": "La méthode push() est utilisée pour ajouter un ou plusieurs éléments à la fin d'un tableau. Elle retourne la nouvelle longueur du tableau après l'ajout."
      },
      {
        "type": "qcm",
        "question": "Quelle méthode crée un nouveau tableau avec les résultats de l'appel d'une fonction fournie sur chaque élément du tableau appelant ?",
        "options": [
          "filter()",
          "reduce()",
          "forEach()",
          "map()"
        ],
        "correctAnswer": 3,
        "explanation": "La méthode map() crée un nouveau tableau avec les résultats de l'appel d'une fonction sur chaque élément du tableau d'origine. Elle est utilisée pour transformer chaque élément d'un tableau sans modifier le tableau original."
      },
      {
        "type": "vrai_faux",
        "question": "En JavaScript, la propriété length d'un tableau peut être modifiée directement pour tronquer ou agrandir le tableau.",
        "correctAnswer": true,
        "explanation": "Vrai. Contrairement à d'autres langages, en JavaScript la propriété length peut être modifiée directement. Si vous définissez length à une valeur inférieure au nombre d'éléments, le tableau sera tronqué. Si vous la définissez à une valeur supérieure, le tableau sera agrandi avec des 'trous' (éléments undefined)."
      },
      {
        "type": "completion",
        "question": "Complétez le code pour utiliser la méthode reduce() afin de calculer la somme des nombres dans le tableau :",
        "codeTemplate": "const numbers = [1, 2, 3, 4, 5];\nconst sum = numbers.[?]((accumulator, currentValue) => accumulator + currentValue, 0);\nconsole.log(sum); // Affiche 15",
        "correctAnswer": "reduce",
        "explanation": "La méthode reduce() exécute une fonction de réduction sur chaque élément du tableau, avec un accumulateur pour produire une valeur unique. Le premier argument est une fonction callback et le second est la valeur initiale de l'accumulateur (ici 0)."
      },
      {
        "type": "completion",
        "question": "Complétez le code pour créer un nouveau tableau contenant uniquement les nombres pairs :",
        "codeTemplate": "const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst evenNumbers = numbers.[?](number => number % 2 === 0);\nconsole.log(evenNumbers); // Affiche [2, 4, 6, 8, 10]",
        "correctAnswer": "filter",
        "explanation": "La méthode filter() crée un nouveau tableau avec tous les éléments qui passent le test implémenté par la fonction fournie. Dans ce cas, nous gardons seulement les nombres qui, lorsqu'ils sont divisés par 2, ont un reste de 0 (ce qui est la définition des nombres pairs)."
      },
      {
        "type": "debugging",
        "question": "Trouvez et corrigez l'erreur dans ce code qui tente de copier un tableau :",
        "buggyCode": "// Code pour copier un tableau\nconst original = [1, 2, 3, 4, 5];\nconst copy = original;\ncopy.push(6);\n\nconsole.log(original); // Devrait afficher [1, 2, 3, 4, 5] sans le 6\nconsole.log(copy);    // Devrait afficher [1, 2, 3, 4, 5, 6]",
        "correctAnswer": "// Code pour copier un tableau\nconst original = [1, 2, 3, 4, 5];\nconst copy = [...original]; // ou original.slice()\ncopy.push(6);\n\nconsole.log(original); // Devrait afficher [1, 2, 3, 4, 5] sans le 6\nconsole.log(copy);    // Devrait afficher [1, 2, 3, 4, 5, 6]",
        "explanation": "L'erreur est que la variable 'copy' fait référence au même tableau que 'original', donc toute modification de 'copy' affecte aussi 'original'. Pour créer une véritable copie, on peut utiliser la syntaxe spread [...original] ou la méthode slice() sans arguments (original.slice()). Ces méthodes créent une nouvelle instance de tableau avec les mêmes éléments."
      },
      {
        "type": "debugging",
        "question": "Trouvez et corrigez l'erreur dans ce code qui essaie de trouver l'élément le plus grand dans un tableau :",
        "buggyCode": "function findMax(arr) {\n  let max = 0;\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\nconst numbers = [5, 8, 3, 12, 7, 2];\nconst result = findMax(numbers);\nconsole.log(result); // Devrait afficher 12",
        "correctAnswer": "function findMax(arr) {\n  let max = arr[0]; // ou Math.max(...arr)\n  for(let i = 0; i < arr.length; i++) {\n    if(arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n}\n\nconst numbers = [5, 8, 3, 12, 7, 2];\nconst result = findMax(numbers);\nconsole.log(result); // Devrait afficher 12",
        "explanation": "L'erreur est d'initialiser max à 0, ce qui ne fonctionnera pas correctement si le tableau contient des nombres négatifs. Il faut initialiser max à arr[0] (la première valeur du tableau) ou utiliser directement Math.max(...arr) pour trouver le maximum. La version corrigée fonctionne pour tous les types de nombres."
      }
    ]
  }
}