{
  "useEffect": {
    "name": "useEffect()",
    "category": "hooks",
    "description": "Hook pour gérer les effets secondaires dans les composants fonctionnels React. Permet d'effectuer des opérations comme les appels API, les abonnements à des événements, ou les modifications manuelles du DOM.",
    "syntax": "useEffect(setup, dependencies?)",
    "attributes": [
      {
        "name": "setup",
        "description": "Fonction contenant le code de l'effet à exécuter. Cette fonction peut retourner une fonction de nettoyage (cleanup) optionnelle."
      },
      {
        "name": "dependencies",
        "description": "Tableau optionnel de dépendances. Si fourni, l'effet ne s'exécutera que si au moins une des dépendances a changé depuis le dernier rendu."
      }
    ],
    "examples": [
      {
        "title": "Effet exécuté à chaque rendu",
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction ExampleComponent() {\n  const [count, setCount] = useState(0);\n\n  // S'exécute après chaque rendu\n  useEffect(() => {\n    console.log('Le composant a été rendu');\n    document.title = `Vous avez cliqué ${count} fois`;\n  });\n\n  return (\n    <div>\n      <p>Vous avez cliqué {count} fois</p>\n      <button onClick={() => setCount(count + 1)}>\n        Cliquez ici\n      </button>\n    </div>\n  );\n}"
      },
      {
        "title": "Effet avec dépendances",
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction UserProfile({ userId }) {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // S'exécute uniquement quand userId change\n  useEffect(() => {\n    setLoading(true);\n    fetch(`https://api.example.com/users/${userId}`)\n      .then(response => response.json())\n      .then(data => {\n        setUser(data);\n        setLoading(false);\n      });\n  }, [userId]); // Tableau de dépendances\n\n  if (loading) return <p>Chargement...</p>;\n  if (!user) return <p>Utilisateur non trouvé</p>;\n\n  return (\n    <div>\n      <h1>{user.name}</h1>\n      <p>Email: {user.email}</p>\n    </div>\n  );\n}"
      },
      {
        "title": "Effet avec fonction de nettoyage",
        "code": "import React, { useState, useEffect } from 'react';\n\nfunction WindowWidth() {\n  const [width, setWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    // Définition de l'effet\n    const handleResize = () => setWidth(window.innerWidth);\n    window.addEventListener('resize', handleResize);\n    \n    // Fonction de nettoyage (cleanup)\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []); // Tableau vide = exécution une seule fois (montage)\n\n  return <p>Largeur de la fenêtre: {width}px</p>;\n}"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Introduction à useEffect",
          "text": "useEffect est un Hook qui permet d'effectuer des effets secondaires dans les composants fonctionnels. Il remplace les méthodes de cycle de vie comme componentDidMount, componentDidUpdate et componentWillUnmount des composants classe.",
          "code": "import React, { useEffect } from 'react';\n\nfunction MonComposant() {\n  useEffect(() => {\n    // Code exécuté après le rendu\n    console.log('Composant rendu');\n  });\n  \n  return <div>Contenu du composant</div>;\n}",
          "visualDemo": {
            "content": "<div style='background: #f0f0f0; padding: 20px; border-radius: 8px; font-family: Arial, sans-serif;'><div style='background: #ffffff; border-radius: 4px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='margin-bottom: 15px;'><code style='background: #f7f7f7; padding: 8px; border-radius: 4px; display: block; font-family: monospace; color: #333;'>useEffect(() => {<br>&nbsp;&nbsp;// Effet exécuté après le rendu<br>});</code></div><div style='display: flex; align-items: center;'><div style='background: #61dafb; color: white; border-radius: 50%; width: 24px; height: 24px; display: flex; align-items: center; justify-content: center; margin-right: 10px;'>→</div><span>Exécution après chaque rendu du composant</span></div></div></div>"
          }
        },
        {
          "title": "Contrôle des exécutions avec les dépendances",
          "text": "Le tableau de dépendances permet de contrôler quand l'effet doit s'exécuter. Sans tableau, l'effet s'exécute après chaque rendu. Un tableau vide fait que l'effet ne s'exécute qu'une seule fois. Un tableau avec des valeurs fait que l'effet s'exécute quand ces valeurs changent.",
          "code": "// Après chaque rendu\nuseEffect(() => {\n  console.log('Exécuté à chaque rendu');\n});\n\n// Une seule fois (équivalent à componentDidMount)\nuseEffect(() => {\n  console.log('Exécuté uniquement au montage');\n}, []);\n\n// Quand count change\nuseEffect(() => {\n  console.log('count a changé:', count);\n}, [count]);",
          "visualDemo": {
            "content": "<div style='background: #f0f0f0; padding: 20px; border-radius: 8px; font-family: Arial, sans-serif;'><div style='display: flex; flex-direction: column; gap: 15px;'><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='background: #61dafb; color: white; border-radius: 4px; padding: 4px 8px; margin-right: 10px; font-size: 12px;'>Pas de dépendances</div></div><code style='background: #f7f7f7; padding: 6px; border-radius: 4px; display: block; font-family: monospace; color: #333; font-size: 13px;'>useEffect(() => { ... });</code><div style='margin-top: 10px; font-size: 13px;'>→ S'exécute après <strong>chaque</strong> rendu</div></div><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='background: #61dafb; color: white; border-radius: 4px; padding: 4px 8px; margin-right: 10px; font-size: 12px;'>Tableau vide</div></div><code style='background: #f7f7f7; padding: 6px; border-radius: 4px; display: block; font-family: monospace; color: #333; font-size: 13px;'>useEffect(() => { ... }, []);</code><div style='margin-top: 10px; font-size: 13px;'>→ S'exécute <strong>une seule fois</strong> au montage</div></div><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='background: #61dafb; color: white; border-radius: 4px; padding: 4px 8px; margin-right: 10px; font-size: 12px;'>Avec dépendances</div></div><code style='background: #f7f7f7; padding: 6px; border-radius: 4px; display: block; font-family: monospace; color: #333; font-size: 13px;'>useEffect(() => { ... }, [count]);</code><div style='margin-top: 10px; font-size: 13px;'>→ S'exécute <strong>uniquement</strong> quand count change</div></div></div></div>"
          }
        },
        {
          "title": "Nettoyage des effets",
          "text": "La fonction de nettoyage (cleanup) permet d'éviter les fuites mémoire en nettoyant les ressources utilisées par l'effet, comme les abonnements aux événements ou les timers.",
          "code": "useEffect(() => {\n  // Création d'un timer\n  const timerId = setInterval(() => {\n    console.log('Timer tick');\n  }, 1000);\n  \n  // Fonction de nettoyage\n  return () => {\n    clearInterval(timerId);\n    console.log('Timer nettoyé');\n  };\n}, []);",
          "visualDemo": {
            "content": "<div style='background: #f0f0f0; padding: 20px; border-radius: 8px; font-family: Arial, sans-serif;'><div style='background: #ffffff; border-radius: 4px; padding: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; flex-direction: column; gap: 15px;'><div><h3 style='margin: 0 0 10px 0; font-size: 16px; color: #333;'>Cycle de vie d'un effet</h3><div style='display: flex; align-items: center; margin-bottom: 20px;'><div style='flex: 1; text-align: center; padding: 10px; background: #e6f7ff; border-radius: 4px;'>Montage</div><div style='margin: 0 10px;'>→</div><div style='flex: 1; text-align: center; padding: 10px; background: #e6f7ff; border-radius: 4px;'>Mises à jour</div><div style='margin: 0 10px;'>→</div><div style='flex: 1; text-align: center; padding: 10px; background: #e6f7ff; border-radius: 4px;'>Démontage</div></div></div><div style='display: flex; gap: 15px;'><div style='flex: 1; background: #f0fff0; padding: 15px; border-radius: 4px; border-left: 3px solid #52c41a;'><div style='font-weight: bold; margin-bottom: 5px;'>Configuration</div><div style='font-size: 13px;'>useEffect(() => { ... });</div></div><div style='flex: 1; background: #fff0f0; padding: 15px; border-radius: 4px; border-left: 3px solid #f5222d;'><div style='font-weight: bold; margin-bottom: 5px;'>Nettoyage</div><div style='font-size: 13px;'>return () => { ... };</div></div></div><div style='margin-top: 15px; background: #fffbe6; padding: 12px; border-radius: 4px; border-left: 3px solid #faad14;'><span style='font-weight: bold;'>Important :</span> Le nettoyage s'effectue avant chaque nouvelle exécution de l'effet et au démontage du composant.</div></div></div></div>"
          }
        },
        {
          "title": "Cas d'utilisation courants",
          "text": "useEffect est utilisé pour de nombreuses opérations comme les appels API, la gestion d'abonnements, la manipulation du DOM, et plus encore.",
          "code": "// Appel API\nuseEffect(() => {\n  fetch('https://api.example.com/data')\n    .then(response => response.json())\n    .then(data => setData(data));\n}, []);\n\n// Abonnement à un événement\nuseEffect(() => {\n  const handleKeyDown = (e) => {\n    if (e.key === 'Escape') onClose();\n  };\n  window.addEventListener('keydown', handleKeyDown);\n  return () => {\n    window.removeEventListener('keydown', handleKeyDown);\n  };\n}, [onClose]);\n\n// Synchronisation avec localStorage\nuseEffect(() => {\n  localStorage.setItem('preferences', JSON.stringify(preferences));\n}, [preferences]);",
          "visualDemo": {
            "content": "<div style='background: #f0f0f0; padding: 20px; border-radius: 8px; font-family: Arial, sans-serif;'><div style='display: grid; grid-template-columns: repeat(2, 1fr); gap: 15px;'><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; background: #1890ff; color: white; border-radius: 50%; margin-right: 10px;'>📡</div><div style='font-weight: bold;'>Appels API</div></div><div style='font-size: 13px; color: #666;'>Récupération de données depuis un serveur</div></div><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; background: #52c41a; color: white; border-radius: 50%; margin-right: 10px;'>👂</div><div style='font-weight: bold;'>Événements</div></div><div style='font-size: 13px; color: #666;'>Gestion des écouteurs d'événements</div></div><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; background: #722ed1; color: white; border-radius: 50%; margin-right: 10px;'>🔄</div><div style='font-weight: bold;'>Synchronisation</div></div><div style='font-size: 13px; color: #666;'>Maintenir des données synchronisées</div></div><div style='background: #ffffff; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);'><div style='display: flex; align-items: center; margin-bottom: 10px;'><div style='width: 30px; height: 30px; display: flex; align-items: center; justify-content: center; background: #fa8c16; color: white; border-radius: 50%; margin-right: 10px;'>🧹</div><div style='font-weight: bold;'>Nettoyage</div></div><div style='font-size: 13px; color: #666;'>Éviter les fuites mémoire</div></div></div></div>"
          }
        }
      ]
    },
    "exercises": [
      {
        "type": "qcm",
        "question": "Quelle est la fonction de nettoyage (cleanup) dans useEffect ?",
        "options": [
          "Une fonction séparée appelée useCleanup()",
          "La fonction retournée par la fonction passée à useEffect",
          "Un second argument passé à useEffect",
          "Une méthode intégrée qui s'exécute automatiquement"
        ],
        "correctAnswer": 1,
        "explanation": "La fonction de nettoyage est la fonction optionnelle que vous pouvez retourner depuis la fonction d'effet. Cette fonction de nettoyage s'exécute avant que le composant soit retiré du DOM et avant chaque nouvel effet si les dépendances ont changé."
      },
      {
        "type": "vrai_faux",
        "question": "Dans useEffect, un tableau de dépendances vide [] signifie que l'effet s'exécutera après chaque rendu du composant.",
        "correctAnswer": false,
        "explanation": "Un tableau de dépendances vide [] signifie que l'effet s'exécutera une seule fois après le montage initial du composant (équivalent à componentDidMount dans les composants classe), mais pas lors des rendus suivants."
      },
      {
        "type": "completion",
        "question": "Complétez ce code pour qu'il exécute l'effet uniquement lorsque la variable 'id' change :",
        "codeTemplate": "useEffect(() => {\n  fetchData(id);\n}, [?]);",
        "correctAnswer": "[id]",
        "explanation": "En passant 'id' dans le tableau de dépendances, vous indiquez à React de n'exécuter l'effet que lorsque la valeur de 'id' change entre les rendus."
      },
      {
        "type": "debugging",
        "question": "Trouvez et corrigez l'erreur dans ce code qui crée une fuite mémoire :",
        "buggyCode": "useEffect(() => {\n  const timer = setInterval(() => {\n    setCount(c => c + 1);\n  }, 1000);\n}, []);",
        "correctAnswer": "useEffect(() => {\n  const timer = setInterval(() => {\n    setCount(c => c + 1);\n  }, 1000);\n  \n  return () => {\n    clearInterval(timer);\n  };\n}, []);",
        "explanation": "L'erreur est l'absence de fonction de nettoyage pour supprimer l'intervalle. Sans cette fonction de nettoyage, quand le composant est démonté, l'intervalle continuerait à s'exécuter, provoquant une fuite mémoire et potentiellement des erreurs."
      },
      {
        "type": "qcm",
        "question": "Quand la fonction de nettoyage est-elle exécutée ?",
        "options": [
          "Uniquement lorsque le composant est démonté",
          "Avant chaque nouvelle exécution de l'effet et au démontage",
          "Seulement si on l'appelle explicitement dans le code",
          "À chaque rendu du composant"
        ],
        "correctAnswer": 1,
        "explanation": "La fonction de nettoyage est exécutée à deux moments : juste avant que le composant soit retiré du DOM (démonté) et avant chaque nouvelle exécution de l'effet si les dépendances ont changé."
      },
      {
        "type": "debugging",
        "question": "Ce code contient une erreur courante avec useEffect. Corrigez-la :",
        "buggyCode": "function SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  \n  useEffect(() => {\n    fetchResults(query).then(data => {\n      setResults(data);\n    });\n  });\n  \n  return <ResultsList results={results} />;\n}",
        "correctAnswer": "function SearchResults({ query }) {\n  const [results, setResults] = useState([]);\n  \n  useEffect(() => {\n    fetchResults(query).then(data => {\n      setResults(data);\n    });\n  }, [query]);\n  \n  return <ResultsList results={results} />;\n}",
        "explanation": "L'erreur est que useEffect n'a pas de tableau de dépendances, ce qui fait qu'il s'exécute après chaque rendu, créant potentiellement une boucle infinie. La correction ajoute [query] comme dépendance, ce qui fait que l'effet ne s'exécute que lorsque query change."
      }
    ],
    "related": ["useState", "useContext", "useReducer", "useCallback", "useMemo"]
  }
}