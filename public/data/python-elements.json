{
  "abs": {
    "name": "abs()",
    "category": "basics",
    "description": "Retourne la valeur absolue d'un nombre, c'est-à-dire sa distance par rapport à zéro sans considérer son signe.",
    "syntax": "abs(x)",
    "attributes": [
      {
        "name": "x",
        "description": "Le nombre dont on veut obtenir la valeur absolue. Peut être un entier, un flottant, un nombre complexe ou un objet implémentant la méthode __abs__()."
      }
    ],
    "examples": [
      {
        "title": "Utilisation basique avec différents types",
        "code": "# Avec un entier négatif\nprint(abs(-10))  # 10\n\n# Avec un flottant négatif\nprint(abs(-3.14))  # 3.14\n\n# Avec un entier positif (reste inchangé)\nprint(abs(42))  # 42\n\n# Avec un nombre complexe (retourne sa magnitude)\nprint(abs(3 + 4j))  # 5.0"
      },
      {
        "title": "Utilisation personnalisée avec une classe",
        "code": "class Vecteur:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __abs__(self):\n        # Distance à l'origine (norme euclidienne)\n        return (self.x**2 + self.y**2) ** 0.5\n\n# Création d'un vecteur (3, 4)\nv = Vecteur(3, 4)\n\n# Obtention de sa norme\nprint(abs(v))  # 5.0"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Qu'est-ce que abs() ?",
          "text": "La fonction abs() est une fonction intégrée en Python qui retourne la valeur absolue d'un nombre, c'est-à-dire sa distance par rapport à zéro sans tenir compte de son signe.",
          "code": "# Exemples simples de abs()\nprint(abs(-5))  # 5\nprint(abs(5))   # 5\nprint(abs(0))   # 0",
          "visualDemo": {
            "content": "<div style='display: flex; justify-content: center; padding: 20px;'><div style='background-color: #f8f9fa; padding: 15px; border-radius: 8px; text-align: center;'><div style='margin-bottom: 15px; font-weight: bold;'>Valeur absolue</div><div style='display: flex; align-items: center; justify-content: center;'><div style='width: 300px; height: 60px; position: relative; margin: 0 auto;'><div style='position: absolute; top: 30px; left: 0; right: 0; height: 2px; background-color: black;'></div><div style='position: absolute; top: 25px; left: 150px; width: 2px; height: 10px; background-color: black;'></div><div style='position: absolute; top: 40px; left: 150px; text-align: center;'>0</div><div style='position: absolute; top: 25px; left: 75px; width: 2px; height: 10px; background-color: black;'></div><div style='position: absolute; top: 40px; left: 75px; text-align: center;'>-5</div><div style='position: absolute; top: 25px; left: 225px; width: 2px; height: 10px; background-color: black;'></div><div style='position: absolute; top: 40px; left: 225px; text-align: center;'>5</div><div style='position: absolute; top: 10px; left: 75px; text-align: center; font-family: monospace; color: #6c757d;'>abs(-5) = 5</div><div style='position: absolute; top: 10px; left: 225px; text-align: center; font-family: monospace; color: #6c757d;'>abs(5) = 5</div><div style='position: absolute; top: 0px; left: 75px; width: 150px; height: 2px; border-top: 2px solid #dc3545; border-left: 2px solid #dc3545; border-right: 2px solid #dc3545;'></div></div></div></div></div>"
          }
        },
        {
          "title": "Utilisation avec différents types de nombres",
          "text": "La fonction abs() fonctionne avec plusieurs types de nombres: entiers, flottants et même les nombres complexes.",
          "code": "# Avec un entier\nprint(abs(-10))  # 10\n\n# Avec un flottant\nprint(abs(-3.14))  # 3.14\n\n# Avec un nombre complexe (magnitude)\nprint(abs(3 + 4j))  # 5.0",
          "visualDemo": {
            "content": "<div style='display: flex; flex-direction: column; gap: 15px; background-color: #f8f9fa; padding: 15px; border-radius: 8px;'><div style='display: flex; align-items: center; background-color: #e9ecef; padding: 10px; border-radius: 5px;'><div style='font-family: monospace; width: 150px;'>abs(-10)</div><div style='font-weight: bold; margin: 0 10px;'>→</div><div>10</div><div style='margin-left: auto; color: #6c757d;'>entier</div></div><div style='display: flex; align-items: center; background-color: #e9ecef; padding: 10px; border-radius: 5px;'><div style='font-family: monospace; width: 150px;'>abs(-3.14)</div><div style='font-weight: bold; margin: 0 10px;'>→</div><div>3.14</div><div style='margin-left: auto; color: #6c757d;'>flottant</div></div><div style='display: flex; align-items: center; background-color: #e9ecef; padding: 10px; border-radius: 5px;'><div style='font-family: monospace; width: 150px;'>abs(3+4j)</div><div style='font-weight: bold; margin: 0 10px;'>→</div><div>5.0</div><div style='margin-left: auto; color: #6c757d;'>complexe</div></div></div>"
          }
        },
        {
          "title": "Nombres complexes et magnitude",
          "text": "Pour les nombres complexes, abs() retourne la magnitude (ou module), qui est la distance du nombre à l'origine dans le plan complexe.",
          "code": "# Un nombre complexe a + bj\nz = 3 + 4j\n\n# abs() retourne √(a² + b²)\nprint(abs(z))  # 5.0\n\n# Équivalent à:\nprint((z.real**2 + z.imag**2) ** 0.5)  # 5.0",
          "visualDemo": {
            "content": "<div style='font-family: Arial, sans-serif; background-color: #f8f9fa; padding: 16px; border-radius: 8px; max-width: 100%;'><div style='margin-bottom: 16px; color: #306998; font-size: 16px; font-weight: bold; border-bottom: 2px solid #FFD43B; padding-bottom: 8px;'>Nombres complexes et magnitude</div><div style='display: flex; justify-content: center;'><div style='position: relative; width: 240px; height: 240px; background-color: white; border-radius: 8px; padding: 10px;'><svg width='220' height='220' viewBox='0 0 220 220'><defs><marker id='arrow' markerWidth='10' markerHeight='10' refX='9' refY='3' orient='auto' markerUnits='strokeWidth'><path d='M0,0 L0,6 L9,3 z' fill='#306998'/></marker></defs><line x1='20' y1='110' x2='200' y2='110' stroke='#306998' stroke-width='2' marker-end='url(#arrow)'/><line x1='110' y1='200' x2='110' y2='20' stroke='#306998' stroke-width='2' marker-end='url(#arrow)'/><text x='205' y='125' fill='#306998' font-size='12'>Re</text><text x='95' y='20' fill='#306998' font-size='12'>Im</text><text x='110' y='110' text-anchor='middle' dominant-baseline='middle' fill='#306998' font-size='10'>0</text><circle cx='170' cy='50' r='3' fill='#E91E63'/><line x1='110' y1='110' x2='170' y2='50' stroke='#E91E63' stroke-width='2' stroke-dasharray='5,3'/><line x1='170' y1='110' x2='170' y2='50' stroke='#4CAF50' stroke-width='2'/><line x1='110' y1='50' x2='170' y2='50' stroke='#4CAF50' stroke-width='2'/><line x1='110' y1='110' x2='170' y2='110' stroke='#FFD43B' stroke-width='2' stroke-dasharray='3,3'/><line x1='110' y1='110' x2='110' y2='50' stroke='#FFD43B' stroke-width='2' stroke-dasharray='3,3'/><text x='140' y='125' fill='#FFD43B' font-size='12'>3 (réel)</text><text x='80' y='80' fill='#FFD43B' font-size='12'>4 (imaginaire)</text><text x='140' y='80' fill='#E91E63' font-size='12'>5 (magnitude)</text><text x='125' y='40' fill='#306998' font-size='12'>Point: 3+4j</text></svg></div></div><div style='background-color: white; margin-top: 16px; padding: 12px; border-radius: 8px; border-left: 4px solid #306998;'><div style='font-family: monospace; font-size: 14px; color: #333;'>z = 3 + 4j</div><div style='font-family: monospace; font-size: 14px; color: #333; margin-top: 8px;'># Théorème de Pythagore:<br>abs(z) = √(3² + 4²) = √(9 + 16) = √25 = 5.0</div></div></div>"
          }
        },
        {
          "title": "Personnalisation avec __abs__()",
          "text": "Vous pouvez définir comment la fonction abs() se comportera avec vos propres classes en implémentant la méthode spéciale __abs__().",
          "code": "class Vecteur2D:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    \n    def __abs__(self):\n        # Calcule la norme euclidienne\n        return (self.x**2 + self.y**2) ** 0.5\n    \n    def __repr__(self):\n        return f\"Vecteur2D({self.x}, {self.y})\"\n\n# Création d'un vecteur\nv = Vecteur2D(3, 4)\nprint(v)        # Vecteur2D(3, 4)\nprint(abs(v))   # 5.0",
          "visualDemo": {
            "content": "<div style='font-family: Arial, sans-serif; background-color: #f8f9fa; padding: 16px; border-radius: 8px; max-width: 100%;'><div style='margin-bottom: 16px; color: #306998; font-size: 16px; font-weight: bold; border-bottom: 2px solid #FFD43B; padding-bottom: 8px;'>Personnalisation avec __abs__()</div><div style='display: flex; gap: 20px; flex-wrap: wrap;'><div style='flex: 1; min-width: 300px;'><div style='background-color: white; padding: 12px; border-radius: 8px; border-left: 4px solid #306998;'><pre style='margin: 0; font-family: monospace; font-size: 14px; color: #333; overflow-x: auto;'><span style='color: #306998;'>class</span> <span style='color: #FF8C00;'>Vecteur2D</span>: <span style='color: #306998;'>def</span> <span style='color: #9932CC;'>__init__</span>(self, x, y): self.x = x self.y = y <span style='color: #306998;'>def</span> <span style='color: #9932CC;'>__abs__</span>(self): <span style='color: #008000;'># Calcule la norme euclidienne</span> <span style='color: #306998;'>return</span> (self.x**2 + self.y**2) ** 0.5</pre></div><div style='margin-top: 12px; background-color: white; padding: 12px; border-radius: 8px;'><div style='font-family: monospace; margin-bottom: 8px;'><span style='color: #333;'>v = Vecteur2D(3, 4)</span></div><div style='font-family: monospace;'><span style='color: #333;'>print(abs(v))  </span><span style='color: #008000;'># 5.0</span></div></div></div><div style='flex: 1; min-width: 300px;'><div style='background-color: white; padding: 12px; border-radius: 8px; height: calc(100% - 24px); display: flex; flex-direction: column; justify-content: center;'><svg viewBox='0 0 240 200' width='100%'><defs><marker id='arrow2' markerWidth='10' markerHeight='10' refX='9' refY='3' orient='auto' markerUnits='strokeWidth'><path d='M0,0 L0,6 L9,3 z' fill='#306998'/></marker></defs><line x1='40' y1='160' x2='220' y2='160' stroke='#306998' stroke-width='2' marker-end='url(#arrow2)'/><line x1='40' y1='160' x2='40' y2='20' stroke='#306998' stroke-width='2' marker-end='url(#arrow2)'/><text x='230' y='170' fill='#306998' font-size='14'>x</text><text x='30' y='20' fill='#306998' font-size='14'>y</text><line x1='40' y1='160' x2='160' y2='40' stroke='#E91E63' stroke-width='3'/><circle cx='160' cy='40' r='5' fill='#E91E63'/><line x1='40' y1='160' x2='160' y2='160' stroke='#4CAF50' stroke-width='2' stroke-dasharray='5,3'/><line x1='160' y1='160' x2='160' y2='40' stroke='#4CAF50' stroke-width='2' stroke-dasharray='5,3'/><text x='100' y='180' fill='#4CAF50' font-size='14'>v.x = 3</text><text x='10' y='100' fill='#4CAF50' font-size='14'>v.y = 4</text><text x='100' y='100' fill='#E91E63' font-size='14'>abs(v) = 5.0</text><text x='160' y='30' fill='#333' font-size='14'>Vecteur2D(3, 4)</text></svg></div></div></div><div style='background-color: white; margin-top: 16px; padding: 12px; border-radius: 8px; border-left: 4px solid #FFD43B;'><div style='font-weight: bold; margin-bottom: 8px; color: #306998;'>Fonctionnement:</div><ol style='margin: 0; padding-left: 25px;'><li style='margin-bottom: 6px;'>Quand <code>abs(v)</code> est appelé, Python cherche la méthode <code>__abs__</code> de l'objet</li><li style='margin-bottom: 6px;'>Notre méthode calcule la norme euclidienne: √(x² + y²)</li><li>Permet d'étendre les fonctionnalités natives de Python à vos propres types</li></ol></div></div>"
          }
        },
        {
          "title": "Cas d'utilisation pratiques",
          "text": "La fonction abs() est utile dans de nombreux contextes: calculs de distance, comparaisons de valeurs indépendamment du signe, ou pour implémenter des tests d'approximation.",
          "code": "# Calcul d'erreur absolue\nvaleur_attendue = 10.0\nvaleur_mesurée = 9.7\nerreur_absolue = abs(valeur_attendue - valeur_mesurée)\nprint(f\"Erreur absolue: {erreur_absolue}\")  # 0.3\n\n# Test d'approximation\ndef presque_égal(a, b, tolérance=1e-9):\n    return abs(a - b) < tolérance\n\nprint(presque_égal(0.1 + 0.2, 0.3))  # True",
          "visualDemo": {
            "content": "<div style='font-family: Arial, sans-serif; background-color: #f8f9fa; padding: 16px; border-radius: 8px; max-width: 100%;'><div style='margin-bottom: 16px; color: #306998; font-size: 16px; font-weight: bold; border-bottom: 2px solid #FFD43B; padding-bottom: 8px;'>Applications pratiques de abs()</div><div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 16px;'><div style='background-color: white; padding: 16px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'><div style='font-weight: bold; color: #306998; margin-bottom: 12px; font-size: 15px;'>Calcul d'erreur de mesure</div><div style='height: 120px; position: relative; margin-bottom: 16px;'><svg width='100%' height='100%' viewBox='0 0 300 120'><line x1='30' y1='60' x2='270' y2='60' stroke='#333' stroke-width='2'/><line x1='150' y1='30' x2='150' y2='90' stroke='#ddd' stroke-width='1' stroke-dasharray='3,3'/><circle cx='150' cy='60' r='3' fill='#333'/><text x='150' y='80' text-anchor='middle' fill='#666' font-size='12'>Valeur idéale</text><text x='150' y='20' text-anchor='middle' fill='#666' font-size='12'>10.0</text><circle cx='110' cy='60' r='3' fill='#E91E63'/><text x='110' y='80' text-anchor='middle' fill='#E91E63' font-size='12'>Mesure</text><text x='110' y='20' text-anchor='middle' fill='#E91E63' font-size='12'>9.7</text><line x1='110' y1='40' x2='150' y2='40' stroke='#4CAF50' stroke-width='2'/><text x='130' y='35' text-anchor='middle' fill='#4CAF50' font-size='12'>0.3</text></svg></div><pre style='margin: 0; font-family: monospace; font-size: 13px; background-color: #f5f5f5; padding: 8px; border-radius: 4px; overflow-x: auto;'>erreur_absolue = abs(valeur_attendue - valeur_mesurée) print(f\"Erreur absolue: {erreur_absolue}\")  # 0.3</pre></div><div style='background-color: white; padding: 16px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'><div style='font-weight: bold; color: #306998; margin-bottom: 12px; font-size: 15px;'>Tests d'approximation</div><pre style='margin: 0 0 16px 0; font-family: monospace; font-size: 13px; background-color: #f5f5f5; padding: 8px; border-radius: 4px; overflow-x: auto;'><span style='color: #306998;'>def</span> presque_égal(a, b, tolérance=1e-9): <span style='color: #306998;'>return</span> abs(a - b) < tolérance <span style='color: #008000;'># 0.1 + 0.2 donne en réalité 0.30000000000000004</span> presque_égal(0.1 + 0.2, 0.3)  <span style='color: #008000;'># True</span></pre><div style='display: flex; align-items: center; justify-content: center; margin-bottom: 12px;'><div style='height: 40px; width: 280px; position: relative; background-color: #f0f0f0; border-radius: 4px;'><div style='position: absolute; left: 0; top: 0; bottom: 0; width: 100%; display: flex; align-items: center; justify-content: space-between; padding: 0 15px;'><span style='font-family: monospace; font-size: 12px;'>0.299999...</span><span style='font-family: monospace; font-size: 12px;'>0.300000...</span><span style='font-family: monospace; font-size: 12px;'>0.300001...</span></div><div style='position: absolute; left: 47%; right: 5%; top: 35px; height: 20px; border-left: 1px solid #4CAF50; border-right: 1px solid #4CAF50; border-bottom: 1px solid #4CAF50;'></div><div style='position: absolute; left: 49%; top: 58px; font-size: 12px; color: #4CAF50;'>Zone de tolérance</div><div style='position: absolute; left: 50%; top: 15px; width: 10px; height: 10px; background-color: #E91E63; border-radius: 50%; transform: translateX(-50%);'></div><div style='position: absolute; left: 50%; top: 0px; font-size: 12px; color: #E91E63; transform: translateX(-50%);'>0.3</div><div style='position: absolute; left: 46%; top: 15px; width: 10px; height: 10px; background-color: #306998; border-radius: 50%; transform: translateX(-50%);'></div><div style='position: absolute; left: 42%; top: 0px; font-size: 12px; color: #306998; transform: translateX(-50%);'>0.1+0.2</div></div></div><div style='text-align: center; color: #666; font-size: 13px;'>Compense les erreurs d'arrondi en virgule flottante</div></div></div><div style='margin-top: 16px; background-color: white; padding: 12px; border-radius: 8px; border-left: 4px solid #FFD43B;'><div style='font-weight: bold; margin-bottom: 8px; color: #306998;'>Autres applications:</div><ul style='margin: 0; padding-left: 25px;'><li style='margin-bottom: 6px;'>Calcul de distances dans des espaces vectoriels</li><li style='margin-bottom: 6px;'>Détection de convergence dans des algorithmes itératifs</li><li style='margin-bottom: 6px;'>Implémentation d'algorithmes de recherche (distance à l'objectif)</li><li>Normalisation de vecteurs (diviser un vecteur par sa norme)</li></ul></div></div>"
          }
        },
        {
          "title": "Exercices pratiques",
          "text": "Testons votre compréhension de la fonction abs() avec quelques exercices pratiques.",
          "code": "# Exemple d'utilisation avancée de abs()\nclass Temperature:\n    def __init__(self, celsius):\n        self.celsius = celsius\n    \n    def __sub__(self, other):\n        # Retourne la différence entre deux températures\n        return Temperature(self.celsius - other.celsius)\n    \n    def __abs__(self):\n        # Retourne l'écart par rapport à 0°C\n        return abs(self.celsius)\n    \n    def __repr__(self):\n        return f\"{self.celsius}°C\"\n\n# Calculer l'écart entre deux températures\nt1 = Temperature(5)   # 5°C\nt2 = Temperature(-3)  # -3°C\ndiff = abs(t1 - t2)   # abs(8°C) = 8\nprint(f\"Écart de température: {diff}°C\")",
          "visualDemo": {
            "content": "<div style='font-family: Arial, sans-serif; background-color: #f8f9fa; padding: 16px; border-radius: 8px; max-width: 100%;'><div style='margin-bottom: 16px; color: #306998; font-size: 16px; font-weight: bold; border-bottom: 2px solid #FFD43B; padding-bottom: 8px;'>Exercices pratiques avec abs()</div><div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px; margin-bottom: 20px;'><div style='background-color: white; padding: 16px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'><div style='font-weight: bold; color: #306998; margin-bottom: 12px; text-align: center;'>Exercise 1: Calcul d'écart</div><div style='text-align: center; margin-bottom: 10px;'><svg width='200' height='120' viewBox='0 0 200 120'><defs><linearGradient id='tempGrad' x1='0%' y1='0%' x2='100%' y2='0%'><stop offset='0%' style='stop-color:#2196F3;stop-opacity:1' /><stop offset='50%' style='stop-color:#FFFFFF;stop-opacity:1' /><stop offset='100%' style='stop-color:#F44336;stop-opacity:1' /></linearGradient></defs><rect x='20' y='50' width='160' height='20' fill='url(#tempGrad)' rx='3' /><line x1='100' y1='40' x2='100' y2='80' stroke='#333' stroke-width='1' stroke-dasharray='2,2' /><text x='100' y='30' text-anchor='middle' font-size='12'>0°C</text><line x1='40' y1='40' x2='40' y2='80' stroke='#306998' stroke-width='1' /><text x='40' y='90' text-anchor='middle' font-size='12'>-3°C</text><line x1='140' y1='40' x2='140' y2='80' stroke='#FF5722' stroke-width='1' /><text x='140' y='90' text-anchor='middle' font-size='12'>5°C</text><line x1='40' y1='110' x2='140' y2='110' stroke='#4CAF50' stroke-width='2' /><text x='90' y='110' text-anchor='middle' font-size='11' fill='#4CAF50'>abs(5 - (-3)) = 8</text></svg></div><div style='font-family: monospace; font-size: 13px; background-color: #f5f5f5; padding: 8px; border-radius: 4px;'>t1 = Temperature(5)<br>t2 = Temperature(-3)<br>diff = abs(t1 - t2)<br>print(diff)  # 8°C</div></div><div style='background-color: white; padding: 16px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1);'><div style='font-weight: bold; color: #306998; margin-bottom: 12px; text-align: center;'>Exercise 2: Analyse numérique</div><div style='text-align: center; margin-bottom: 10px;'><svg width='200' height='120' viewBox='0 0 200 120'><rect x='25' y='20' width='150' height='80' fill='#f5f5f5' rx='4' /><path d='M 25,60 Q 40,75 60,40 T 100,60 T 140,20 T 175,60' stroke='#FF5722' stroke-width='2' fill='none' /><path d='M 25,60 Q 40,55 60,70 T 100,50 T 140,65 T 175,60' stroke='#306998' stroke-width='2' fill='none' /><line x1='25' y1='60' x2='175' y2='60' stroke='#ddd' stroke-width='1' stroke-dasharray='3,3' /><text x='100' y='110' text-anchor='middle' font-size='12'>trouver racine: abs(f(x)) < epsilon</text></svg></div><div style='font-family: monospace; font-size: 13px; background-color: #f5f5f5; padding: 8px; border-radius: 4px;'>def trouver_racine(f, a, b, epsilon=1e-6):<br>  while (b - a) > epsilon:<br>    c = (a + b) / 2<br>    if abs(f(c)) < epsilon:<br>      return c<br>    # reste de l'algorithme...</text></div></div></div><div style='display: flex; flex-direction: column; background-color: white; padding: 16px; border-radius: 8px; margin-bottom: 16px;'><div style='font-weight: bold; color: #306998; margin-bottom: 12px; text-align: center;'>Exercice 3: Normalization</div><div style='display: flex; flex-wrap: wrap; gap: 16px; justify-content: center;'><div style='flex: 1; min-width: 300px;'><svg width='100%' viewBox='0 0 220 180'><rect x='10' y='10' width='200' height='160' fill='#f5f5f5' rx='4' /><line x1='30' y1='150' x2='190' y2='150' stroke='#333' stroke-width='1.5' /><line x1='30' y1='150' x2='30' y2='30' stroke='#333' stroke-width='1.5' /><text x='195' y='155' font-size='12'>x</text><text x='25' y='25' font-size='12'>y</text><line x1='30' y1='150' x2='130' y2='70' stroke='#E91E63' stroke-width='3' /><circle cx='130' cy='70' r='4' fill='#E91E63' /><text x='140' y='70' font-size='12'>v = [5, 4]</text><line x1='30' y1='150' x2='93' y2='103' stroke='#4CAF50' stroke-width='3' stroke-dasharray='5,3' /><circle cx='93' cy='103' r='4' fill='#4CAF50' /><text x='65' y='110' font-size='12'>v / |v| = [0.6, 0.8]</text><text x='40' y='40' font-size='12'>Normalisation: v / abs(v)</text></svg></div><div style='flex: 1; min-width: 280px;'><div style='font-family: monospace; font-size: 13px; background-color: #f5f5f5; padding: 12px; border-radius: 4px; height: calc(100% - 24px);'>import numpy as np<br><br>class Vector:<br>  def __init__(self, *components):<br>    self.v = np.array(components)<br>  <br>  def __abs__(self):<br>    return np.sqrt(np.sum(self.v**2))<br>  <br>  def normalize(self):<br>    return Vector(*(self.v / abs(self)))<br><br>v = Vector(5, 4)<br>print(abs(v))         # 6.4<br>print(v.normalize())  # [0.78, 0.62]</div></div></div></div><div style='background-color: white; padding: 16px; border-radius: 8px; margin-bottom: 16px;'><div style='font-weight: bold; margin-bottom: 12px; color: #306998;'>Exercice 4: Implémentez une classe Distance</div><pre style='font-family: monospace; font-size: 14px; background-color: #f5f5f5; padding: 12px; border-radius: 4px; margin-bottom: 12px; white-space: pre-wrap;'># Complétez la classe Distance pour qu'elle fonctionne avec abs() class Distance: def __init__(self, metres): self.metres = metres def __abs__(self): # À compléter pass def __sub__(self, other): # À compléter pass </pre><div style='padding: 12px; background-color: #e8f5e9; border-radius: 4px; border-left: 4px solid #4CAF50;'><div style='font-weight: bold; margin-bottom: 8px;'>Indice:</div>La méthode __abs__ doit retourner une valeur positive, peu importe le signe de self.metres. La méthode __sub__ doit retourner une nouvelle instance de Distance.</div></div><div style='background-color: white; padding: 16px; border-radius: 8px;'><div style='font-weight: bold; margin-bottom: 12px; color: #306998;'>Exercice 5: Détection d'erreurs</div><pre style='font-family: monospace; font-size: 14px; background-color: #f5f5f5; padding: 12px; border-radius: 4px; margin-bottom: 12px; white-space: pre-wrap;'># Trouvez et corrigez l'erreur dans ce code class Point: def __init__(self, x, y): self.x = x self.y = y def distance(self, other): return abs((self.x - other.x) + (self.y - other.y)) p1 = Point(0, 0) p2 = Point(3, 4) print(p1.distance(p2))  # Devrait afficher 5.0 </pre><div style='padding: 12px; background-color: #ffebee; border-radius: 4px; border-left: 4px solid #F44336;'><div style='font-weight: bold; margin-bottom: 8px;'>Erreur:</div>La formule de distance euclidienne requiert de calculer la racine carrée de la somme des carrés des différences de coordonnées, et non simplement la somme des différences absolues.</div></div></div>"
          }
        }
      ]
    },
    "exercises": [
      {
        "type": "qcm",
        "question": "Quelle est la valeur de abs(-7.5) ?",
        "options": [
          "-7.5",
          "7.5",
          "7",
          "-7"
        ],
        "correctAnswer": 1,
        "explanation": "La fonction abs() retourne la valeur absolue d'un nombre, ce qui correspond à sa distance à zéro sans considérer son signe. Pour -7.5, la valeur absolue est 7.5."
      },
      {
        "type": "vrai_faux",
        "question": "La fonction abs() peut être utilisée avec des nombres complexes.",
        "correctAnswer": true,
        "explanation": "La fonction abs() fonctionne avec les nombres complexes et retourne le module (ou magnitude) du nombre complexe, qui est la distance euclidienne du nombre à l'origine dans le plan complexe."
      },
      {
        "type": "completion",
        "question": "Complétez le code suivant pour implémenter la méthode __abs__ de la classe Circle, qui doit retourner la circonférence du cercle :",
        "codeTemplate": "import math\n\nclass Circle:\n    def __init__(self, radius):\n        self.radius = radius\n    \n    def __abs__(self):\n        return [?] * self.radius",
        "correctAnswer": "2 * math.pi",
        "explanation": "Pour calculer la circonférence d'un cercle, on utilise la formule 2πr, où r est le rayon. Donc, __abs__ doit retourner 2 * math.pi * self.radius."
      },
      {
        "type": "debugging",
        "question": "Identifiez et corrigez l'erreur dans le code suivant, qui est censé calculer l'écart moyen absolu d'une liste de nombres :",
        "buggyCode": "def ecart_moyen_absolu(nombres):\n    moyenne = sum(nombres) / len(nombres)\n    somme_ecarts = sum(abs(nombre - moyenne) for nombre in nombres)\n    return somme_ecarts",
        "correctAnswer": "def ecart_moyen_absolu(nombres):\n    moyenne = sum(nombres) / len(nombres)\n    somme_ecarts = sum(abs(nombre - moyenne) for nombre in nombres)\n    return somme_ecarts / len(nombres)",
        "explanation": "L'écart moyen absolu est la moyenne des écarts absolus par rapport à la moyenne, pas simplement la somme des écarts. Il faut donc diviser la somme des écarts par le nombre d'éléments."
      }
    ],
    "related": ["round", "min", "max", "pow", "math.sqrt"]
  },
  "aiter": {
    "name": "aiter()",
    "category": "basics",
    "description": "Retourne un itérateur asynchrone pour un itérable asynchrone. Équivalent à appeler x.__aiter__() et permet de travailler avec des objets asynchrones dans des boucles async for.",
    "syntax": "aiter(async_iterable)",
    "attributes": [
      {
        "name": "async_iterable",
        "description": "Un objet qui implémente le protocole d'itérable asynchrone (__aiter__)."
      },
      {
        "name": "Version",
        "description": "Ajoutée dans Python 3.10"
      },
      {
        "name": "Différence avec iter",
        "description": "Contrairement à iter(), aiter() n'a pas de variante à 2 arguments"
      }
    ],
    "examples": [
      {
        "title": "Utilisation basique avec un itérable asynchrone",
        "code": "import asyncio\n\nclass AsyncCounter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        if self.current >= self.end:\n            raise StopAsyncIteration\n        self.current += 1\n        await asyncio.sleep(0.1)  # Simuler une opération asynchrone\n        return self.current - 1\n\nasync def main():\n    counter = AsyncCounter(0, 3)\n    \n    # Utilisation avec aiter\n    async_iterator = aiter(counter)\n    \n    # Récupérer les valeurs\n    async for value in async_iterator:\n        print(value)\n    # Affiche:\n    # 0\n    # 1\n    # 2\n\nasyncio.run(main())"
      },
      {
        "title": "Comparaison entre iter et aiter",
        "code": "class SyncCounter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __iter__(self):\n        return self\n    \n    def __next__(self):\n        if self.current >= self.end:\n            raise StopIteration\n        self.current += 1\n        return self.current - 1\n\nclass AsyncCounter:\n    def __init__(self, start, end):\n        self.current = start\n        self.end = end\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        if self.current >= self.end:\n            raise StopAsyncIteration\n        self.current += 1\n        await asyncio.sleep(0.1)\n        return self.current - 1\n\n# Utilisation synchrone\nsync_counter = SyncCounter(0, 3)\nfor value in iter(sync_counter):\n    print(value)\n\n# Utilisation asynchrone\nasync def main():\n    async_counter = AsyncCounter(0, 3)\n    async for value in aiter(async_counter):\n        print(value)\n\nasyncio.run(main())"
      }
    ],
    "animation": {
      "steps": [
        {
          "title": "Présentation de aiter()",
          "text": "aiter() est une fonction qui crée un itérateur asynchrone à partir d'un itérable asynchrone. Elle est l'équivalent asynchrone de iter() et utilise le même mécanisme avec __aiter__() au lieu de __iter__().",
          "code": "# Syntaxe de base\nasync_iterator = aiter(some_async_iterable)\n\n# Équivalent à:\nasync_iterator = some_async_iterable.__aiter__()",
          "visualDemo": {
            "content": "<div style='background: linear-gradient(145deg, #1a1a1a, #2a2a2a); border-radius: 12px; padding: 24px; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; color: #f0f0f0; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.15); max-width: 100%;'><div style='text-align: center; margin-bottom: 24px;'><h3 style='font-size: 18px; font-weight: 600; color: #ffffff; margin-bottom: 12px;'>aiter() - Itérateur Asynchrone</h3><p style='font-size: 14px; color: #a0a0a0; margin: 0;'>Gestion des itérables asynchrones avec __aiter__</p></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px; margin-bottom: 16px;'><div style='text-align: center; margin-bottom: 12px;'><svg width='100%' viewBox='0 0 600 180'><text x='300' y='30' text-anchor='middle' fill='#4CAF50' font-family='monospace' font-size='16'>aiter(async_iterable)</text><rect x='100' y='60' width='150' height='60' rx='8' fill='#304246' stroke='#4CAF50' stroke-width='2'/><text x='175' y='85' text-anchor='middle' fill='#fff' font-family='monospace' font-size='14'>async_iterable</text><text x='175' y='105' text-anchor='middle' fill='#808080' font-family='monospace' font-size='12'>__aiter__()</text><path d='M250 90 L350 90' stroke='#ffd700' stroke-width='2' marker-end='url(#arrow)'/><rect x='350' y='60' width='150' height='60' rx='8' fill='#304246' stroke='#ffd700' stroke-width='2'/><text x='425' y='85' text-anchor='middle' fill='#fff' font-family='monospace' font-size='14'>async_iterator</text><text x='425' y='105' text-anchor='middle' fill='#808080' font-family='monospace' font-size='12'>__anext__()</text><path d='M425 120 C425 140 425 140 425 140' stroke='#ff5722' stroke-width='2' fill='none'/><path d='M420 130 l5 10 l5 -10 Z' fill='#ff5722'/><text x='425' y='160' text-anchor='middle' fill='#ff5722' font-family='monospace' font-size='12'>async for</text><defs><marker id='arrow' markerWidth='10' markerHeight='10' refX='10' refY='5' orient='auto' fill='#ffd700'><path d='M0,0 L10,5 L0,10 Z'/></marker></defs></svg></div><div style='text-align: center; color: #999999; font-size: 13px; font-style: italic;'>aiter() appelle __aiter__() pour créer un itérateur asynchrone</div></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px; margin-bottom: 16px;'><div style='font-family: monospace; font-size: 14px; line-height: 1.6;'><div style='margin-bottom: 8px;'><span style='color: #569cd6;'>class</span> <span style='color: #4ec9b0;'>AsyncCounter</span>:</div><div style='margin-left: 20px; margin-bottom: 8px;'><span style='color: #4ec9b0;'>def</span> <span style='color: #dcdcaa;'>__aiter__</span>(self):</div><div style='margin-left: 40px; margin-bottom: 8px;'><span style='color: #c586c0;'>return</span> self</div><div style='margin-left: 20px; margin-bottom: 8px;'><span style='color: #c586c0;'>async def</span> <span style='color: #dcdcaa;'>__anext__</span>(self):</div><div style='margin-left: 40px; color: #569cd6;'># ... logique d'itération</div></div></div><div style='text-align: center; font-style: italic; color: #999999;'>Disponible à partir de Python 3.10</div></div>"
          }
        },
        {
          "title": "Différence avec iter()",
          "text": "Contrairement à iter(), aiter() est spécifiquement conçu pour les itérables asynchrones et n'a pas de variante à 2 arguments pour les sentinelles.",
          "code": "# iter() - Synchrone\niterator = iter([1, 2, 3])\nfor item in iterator:\n    print(item)\n\n# iter() avec sentinel (non disponible pour aiter)\nwith open('file.txt') as f:\n    for line in iter(f.readline, ''):\n        print(line)\n\n# aiter() - Asynchrone  \nasync def main():\n    async_iterator = aiter(some_async_iterable)\n    async for item in async_iterator:\n        print(item)\n    \n# Note: aiter() n'a pas de variante sentinel",
          "visualDemo": {
            "content": "<div style='background: linear-gradient(145deg, #1a1a1a, #2a2a2a); border-radius: 12px; padding: 24px; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; color: #f0f0f0; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.15); max-width: 100%;'><div style='text-align: center; margin-bottom: 24px;'><h3 style='font-size: 18px; font-weight: 600; color: #ffffff; margin-bottom: 12px;'>iter() vs aiter()</h3><p style='font-size: 14px; color: #a0a0a0; margin: 0;'>Synchrone vs Asynchrone</p></div><div style='display: grid; grid-template-columns: repeat(2, 1fr); gap: 16px;'><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #4CAF50; font-weight: bold; margin-bottom: 12px;'>iter() - Synchrone</div><div style='margin-bottom: 8px; font-family: monospace; font-size: 13px;'><span style='color: #569cd6;'>iter</span>(<span style='color: #4ec9b0;'>iterable</span>)</div><div style='margin-bottom: 8px; font-family: monospace; font-size: 13px;'><span style='color: #569cd6;'>iter</span>(<span style='color: #4ec9b0;'>callable</span>, <span style='color: #4ec9b0;'>sentinel</span>)</div><div style='height: 80px; border: 1px solid #444; border-radius: 4px; padding: 8px; font-family: monospace; font-size: 12px; margin-top: 8px;'><div style='color: #4ec9b0;'>for</div> item <div style='color: #569cd6;'>in</div> iterator:<div style='margin-left: 20px; color: #808080;'>print(item)</div></div></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #FF9800; font-weight: bold; margin-bottom: 12px;'>aiter() - Asynchrone</div><div style='margin-bottom: 8px; font-family: monospace; font-size: 13px;'><span style='color: #569cd6;'>aiter</span>(<span style='color: #4ec9b0;'>async_iterable</span>)</div><div style='margin-bottom: 8px; font-family: monospace; font-size: 13px; color: #808080;'># Pas de variante sentinel</div><div style='height: 80px; border: 1px solid #444; border-radius: 4px; padding: 8px; font-family: monospace; font-size: 12px; margin-top: 8px;'><div style='color: #4ec9b0;'>async for</div> item <div style='color: #569cd6;'>in</div> iterator:<div style='margin-left: 20px; color: #808080;'>print(item)</div></div></div></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px; margin-top: 16px;'><div style='text-align: center; color: #f44336; font-size: 14px; font-weight: bold; margin-bottom: 8px;'>Attention !</div><div style='text-align: center; color: #999999; font-size: 13px;'>aiter() n'a pas de variante sentinel comme iter()</div></div></div>"
          }
        },
        {
          "title": "Utilisation dans une classe personnalisée",
          "text": "Pour utiliser aiter() avec vos propres classes, vous devez implémenter le protocole d'itération asynchrone en définissant __aiter__() et __anext__().",
          "code": "class AsyncRange:\n    def __init__(self, start, end, step=1):\n        self.current = start\n        self.end = end\n        self.step = step\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        if self.current >= self.end:\n            raise StopAsyncIteration\n        value = self.current\n        self.current += self.step\n        await asyncio.sleep(0.1)  # Simule une opération asynchrone\n        return value\n\nasync def main():\n    # Utilisation avec aiter\n    async_range = AsyncRange(0, 5, 2)\n    async_iterator = aiter(async_range)\n    \n    async for value in async_iterator:\n        print(value)  # Affiche: 0, 2, 4",
          "visualDemo": {
            "content": "<div style='background: linear-gradient(145deg, #1a1a1a, #2a2a2a); border-radius: 12px; padding: 24px; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; color: #f0f0f0; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.15); max-width: 100%;'><div style='text-align: center; margin-bottom: 24px;'><h3 style='font-size: 18px; font-weight: 600; color: #ffffff; margin-bottom: 12px;'>Implémentation du protocole asynchrone</h3><p style='font-size: 14px; color: #a0a0a0; margin: 0;'>Créer des itérables asynchrones personnalisés</p></div><div style='display: flex; flex-direction: column; gap: 16px;'><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #9cdcfe; font-size: 13px; margin-bottom: 12px; font-weight: 500;'>Protocole d'itération asynchrone</div><svg width='100%' viewBox='0 0 600 180'><rect x='50' y='20' width='200' height='120' rx='8' fill='#304246' stroke='#4ec9b0' stroke-width='2'/><text x='150' y='40' text-anchor='middle' fill='#4CAF50' font-family='monospace' font-size='14'>AsyncIterable</text><text x='150' y='70' text-anchor='middle' fill='#9cdcfe' font-family='monospace' font-size='12'>def __aiter__(self):</text><text x='150' y='100' text-anchor='middle' fill='#ff5722' font-family='monospace' font-size='12'>return AsyncIterator</text><rect x='350' y='20' width='200' height='120' rx='8' fill='#304246' stroke='#dcdcaa' stroke-width='2'/><text x='450' y='40' text-anchor='middle' fill='#4CAF50' font-family='monospace' font-size='14'>AsyncIterator</text><text x='450' y='70' text-anchor='middle' fill='#9cdcfe' font-family='monospace' font-size='12'>async def __anext__(self):</text><text x='450' y='100' text-anchor='middle' fill='#ff5722' font-family='monospace' font-size='12'>return value | raise</text><text x='450' y='120' text-anchor='middle' fill='#ff5722' font-family='monospace' font-size='12'>StopAsyncIteration</text><path d='M250 80 L350 80' stroke='#ffd700' stroke-width='2' marker-end='url(#arrow)'/><defs><marker id='arrow' markerWidth='10' markerHeight='10' refX='10' refY='5' orient='auto' fill='#ffd700'><path d='M0,0 L10,5 L0,10 Z'/></marker></defs></svg></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><pre style='margin: 0; font-family: monospace; font-size: 13px; line-height: 1.6;'><span style='color: #569cd6;'>class</span> <span style='color: #4ec9b0;'>AsyncCounter</span>: <span style='color: #569cd6;'>def</span> <span style='color: #dcdcaa;'>__init__</span>(<span style='color: #9cdcfe;'>self</span>, start, end): self.current = start self.end = end <span style='color: #6a9955;'># __aiter__ doit retourner un AsyncIterator</span> <span style='color: #569cd6;'>def</span> <span style='color: #dcdcaa;'>__aiter__</span>(<span style='color: #9cdcfe;'>self</span>): <span style='color: #c586c0;'>return</span> self <span style='color: #6a9955;'># __anext__ est asynchrone</span> <span style='color: #c586c0;'>async def</span> <span style='color: #dcdcaa;'>__anext__</span>(<span style='color: #9cdcfe;'>self</span>): <span style='color: #c586c0;'>if</span> self.current >= self.end: <span style='color: #c586c0;'>raise</span> <span style='color: #4ec9b0;'>StopAsyncIteration</span> value = self.current self.current += 1 <span style='color: #c586c0;'>await</span> <span style='color: #9cdcfe;'>asyncio</span>.<span style='color: #dcdcaa;'>sleep</span>(0.1) <span style='color: #c586c0;'>return</span> value</pre></div></div></div>"
          }
        },
        {
          "title": "Cas d'usage pratiques",
          "text": "aiter() est particulièrement utile pour travailler avec des flux de données asynchrones comme des connexions réseau, des files d'attente asynchrones ou des événements système.",
          "code": "import asyncio\nfrom asyncio import Queue\n\nclass AsyncEventStream:\n    def __init__(self, queue):\n        self.queue = queue\n        self.running = True\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        while self.running:\n            try:\n                event = await asyncio.wait_for(self.queue.get(), timeout=1.0)\n                return event\n            except asyncio.TimeoutError:\n                if not self.running:\n                    raise StopAsyncIteration\n        raise StopAsyncIteration\n\nasync def event_processor():\n    # Simulation d'un flux d'événements\n    event_queue = Queue()\n    stream = AsyncEventStream(event_queue)\n    \n    # Produire des événements en parallèle\n    async def produce_events():\n        for i in range(5):\n            await event_queue.put(f\"Event-{i}\")\n            await asyncio.sleep(0.5)\n        stream.running = False\n    \n    # Traiter les événements avec aiter\n    async def process_events():\n        async for event in aiter(stream):\n            print(f\"Processing: {event}\")\n    \n    # Lancer les deux tâches en parallèle\n    await asyncio.gather(produce_events(), process_events())",
          "visualDemo": {
            "content": "<div style='background: linear-gradient(145deg, #1a1a1a, #2a2a2a); border-radius: 12px; padding: 24px; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen, Ubuntu, Cantarell, sans-serif; color: #f0f0f0; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2), 0 2px 4px -1px rgba(0, 0, 0, 0.15); max-width: 100%;'><div style='text-align: center; margin-bottom: 24px;'><h3 style='font-size: 18px; font-weight: 600; color: #ffffff; margin-bottom: 12px;'>Cas d'usage pratiques</h3><p style='font-size: 14px; color: #a0a0a0; margin: 0;'>Applications réelles avec aiter()</p></div><div style='display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 16px;'><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #4ec9b0; font-size: 12px; margin-bottom: 12px; font-weight: 500;'>File d'attente d'événements</div><svg width='100%' viewBox='0 0 200 140'><rect x='20' y='20' width='160' height='40' rx='4' fill='#1e3d59' stroke='#4CAF50' stroke-width='2'/><text x='100' y='40' text-anchor='middle' fill='#4CAF50' font-family='monospace' font-size='11'>AsyncEventStream</text><rect x='10' y='20' width='15' height='7' rx='1' fill='#ff5722'/><rect x='10' y='33' width='15' height='7' rx='1' fill='#ff5722'/><rect x='10' y='46' width='15' height='7' rx='1' fill='#ff5722'/><text x='5' y='64' fill='#808080' font-family='sans-serif' font-size='8'>Queue</text><path d='M100 60 Q100 80 100 100' stroke='#ffd700' stroke-width='2' fill='none'/><path d='M95 90 l5 10 l5 -10 Z' fill='#ffd700'/><rect x='20' y='100' width='160' height='30' rx='4' fill='#304246' stroke='#ffd700' stroke-width='2'/><text x='100' y='115' text-anchor='middle' fill='#ffd700' font-family='monospace' font-size='11'>async for event</text></svg></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #4ec9b0; font-size: 12px; margin-bottom: 12px; font-weight: 500;'>Connexion réseau</div><svg width='100%' viewBox='0 0 200 140'><path d='M90 30 Q100 20 110 30 T130 30 T150 30' stroke='#4CAF50' stroke-width='2' fill='none'/><path d='M50 30 Q60 35 70 30 T90 30' stroke='#4CAF50' stroke-width='2' fill='none'/><circle cx='100' cy='30' r='5' fill='#4CAF50'/><text x='100' y='25' text-anchor='middle' fill='#808080' font-family='sans-serif' font-size='8'>Network</text><rect x='60' y='60' width='80' height='40' rx='4' fill='#1e3d59' stroke='#4CAF50' stroke-width='2'/><text x='100' y='80' text-anchor='middle' fill='#4CAF50' font-family='monospace' font-size='11'>NetworkStream</text><path d='M100 100 Q100 110 100 120' stroke='#ffd700' stroke-width='2' fill='none'/><text x='100' y='135' text-anchor='middle' fill='#ffd700' font-family='monospace' font-size='11'>async packets</text></svg></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px;'><div style='text-align: center; color: #4ec9b0; font-size: 12px; margin-bottom: 12px; font-weight: 500;'>Système de fichiers</div><svg width='100%' viewBox='0 0 200 140'><rect x='20' y='20' width='30' height='25' rx='2' fill='#304246' stroke='#4CAF50' stroke-width='2'/><rect x='55' y='20' width='30' height='25' rx='2' fill='#304246' stroke='#4CAF50' stroke-width='2'/><rect x='90' y='20' width='30' height='25' rx='2' fill='#304246' stroke='#4CAF50' stroke-width='2'/><rect x='125' y='20' width='30' height='25' rx='2' fill='#304246' stroke='#4CAF50' stroke-width='2'/><text x='35' y='65' fill='#808080' font-family='sans-serif' font-size='8'>Files</text><path d='M35 75 Q35 85 35 95' stroke='#ffd700' stroke-width='2' fill='none'/><path d='M70 75 Q70 85 70 95' stroke='#ffd700' stroke-width='2' fill='none'/><path d='M105 75 Q105 85 105 95' stroke='#ffd700' stroke-width='2' fill='none'/><path d='M30 95 L40 95' stroke='#ffd700' stroke-width='2'/><path d='M65 95 L75 95' stroke='#ffd700' stroke-width='2'/><path d='M100 95 L110 95' stroke='#ffd700' stroke-width='2'/><rect x='20' y='95' width='160' height='30' rx='4' fill='#304246' stroke='#ffd700' stroke-width='2'/><text x='100' y='110' text-anchor='middle' fill='#ffd700' font-family='monospace' font-size='11'>AsyncFileIterator</text></svg></div></div><div style='background: rgba(42, 42, 42, 0.8); border-radius: 8px; padding: 16px; margin-top: 16px;'><pre style='margin: 0; font-family: monospace; font-size: 13px;'><span style='color: #6a9955;'># Exemple: Surveillance de fichier asynchrone</span> <span style='color: #569cd6;'>class</span> <span style='color: #4ec9b0;'>AsyncFileWatcher</span>: <span style='color: #569cd6;'>async def</span> <span style='color: #dcdcaa;'>__anext__</span>(<span style='color: #9cdcfe;'>self</span>): <span style='color: #808080;'># Surveille les changements de fichier</span> change = <span style='color: #c586c0;'>await</span> self.detect_change() <span style='color: #c586c0;'>return</span> change <span style='color: #6a9955;'># Utilisation avec aiter</span> file_watcher = AsyncFileWatcher('/path/to/file') <span style='color: #c586c0;'>async for</span> change <span style='color: #c586c0;'>in</span> <span style='color: #dcdcaa;'>aiter</span>(file_watcher): <span style='color: #dcdcaa;'>print</span>(f\"File changed: {change}\")</pre></div></div>"
          }
        }
      ]
    },
    "exercises": [
      {
        "type": "qcm",
        "question": "Quelle méthode doit implémenter une classe pour être utilisée avec aiter() ?",
        "options": [
          "__iter__()",
          "__aiter__()",
          "__next__()",
          "__anext__()"
        ],
        "correctAnswer": 1,
        "explanation": "Pour qu'une classe soit utilisable avec aiter(), elle doit implémenter la méthode __aiter__() qui retourne un objet avec une méthode __anext__() asynchrone."
      },
      {
        "type": "vrai_faux",
        "question": "aiter() peut être utilisé avec une fonction sentinel comme iter().",
        "correctAnswer": false,
        "explanation": "Contrairement à iter(), aiter() n'a pas de variante à 2 arguments avec un sentinel. Elle ne prend qu'un seul argument : un itérable asynchrone."
      },
      {
        "type": "completion",
        "question": "Complétez le code pour créer un itérateur asynchrone à partir d'un itérable asynchrone :",
        "codeTemplate": "async def main():\n    async_iterable = AsyncCounter(0, 5)\n    iterator = [?](async_iterable)\n    async for value in iterator:\n        print(value)",
        "correctAnswer": "aiter",
        "explanation": "aiter() est la fonction utilisée pour créer un itérateur asynchrone à partir d'un itérable asynchrone, similaire à iter() pour les itérables synchrones."
      },
      {
        "type": "debugging",
        "question": "Ce code ne fonctionne pas. Identifiez et corrigez l'erreur :",
        "buggyCode": "class AsyncReader:\n    def __init__(self, items):\n        self.items = items\n        self.index = 0\n    \n    def __aiter__(self):\n        return self\n    \n    def __next__(self):\n        if self.index >= len(self.items):\n            raise StopAsyncIteration\n        item = self.items[self.index]\n        self.index += 1\n        return item\n\nasync def main():\n    reader = AsyncReader([1, 2, 3])\n    async for item in aiter(reader):\n        print(item)",
        "correctAnswer": "class AsyncReader:\n    def __init__(self, items):\n        self.items = items\n        self.index = 0\n    \n    def __aiter__(self):\n        return self\n    \n    async def __anext__(self):\n        if self.index >= len(self.items):\n            raise StopAsyncIteration\n        item = self.items[self.index]\n        self.index += 1\n        return item\n\nasync def main():\n    reader = AsyncReader([1, 2, 3])\n    async for item in aiter(reader):\n        print(item)",
        "explanation": "L'erreur est que __next__() doit être __anext__() pour les itérateurs asynchrones. La méthode __anext__() doit être déclarée comme 'async def' et utiliser 'raise StopAsyncIteration' pour signaler la fin de l'itération."
      }
    ],
    "related": ["iter", "async", "await", "asyncio", "async for", "StopAsyncIteration"]
  }
}